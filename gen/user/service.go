// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen user-srv/design

package user

import (
	"context"
	userviews "user-srv/gen/user/views"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The user service makes it possible to view, add or update user info.
type Service interface {
	// Show user info by Token
	Retrieve(context.Context, *RetrievePayload) (res *ResponseData, err error)
	// Add new user
	Create(context.Context, *AddUser) (res *ResponseData, err error)
	// Creates a valid JWT
	Signin(context.Context, *Signin) (res *ResponseData, err error)
	// Update avatar and nickname about user
	Update(context.Context, *UpdateUser) (err error)
	// Send email to active user
	SendEmail(context.Context, *SendEmail) (res *ResponseData, err error)
	// Active email to user
	ActiveEmail(context.Context, *EmailCode) (res *ResponseData, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"retrieve", "create", "signin", "update", "sendEmail", "activeEmail"}

// RetrievePayload is the payload type of the user service retrieve method.
type RetrievePayload struct {
	// JWT used for authentication
	Token string
}

// ResponseData is the result type of the user service retrieve method.
type ResponseData struct {
	// code
	Code int
	// message
	Message string
	Data    string
}

// AddUser is the payload type of the user service create method.
type AddUser struct {
	// email of userProfile
	Email string
	// password of userProfile
	Password string
}

// Signin is the payload type of the user service signin method.
type Signin struct {
	// Email used to perform signin
	Email string
	// Password used to perform signin
	Password string
}

// UpdateUser is the payload type of the user service update method.
type UpdateUser struct {
	// avatar of user
	Avatar string
	// nickname of user
	Nickname string
	// JWT used for authentication
	Token string
}

// SendEmail is the payload type of the user service sendEmail method.
type SendEmail struct {
	// email of userProfile
	Email string
}

// EmailCode is the payload type of the user service activeEmail method.
type EmailCode struct {
	// The code for email to active
	Code string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInvalideToken builds a goa.ServiceError from an error.
func MakeInvalideToken(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "invalide_token",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeEmailExist builds a goa.ServiceError from an error.
func MakeEmailExist(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "email_exist",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeEmailOrPasswordError builds a goa.ServiceError from an error.
func MakeEmailOrPasswordError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "email_or_password_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeEmailNotFound builds a goa.ServiceError from an error.
func MakeEmailNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "email_not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeCodeInvalide builds a goa.ServiceError from an error.
func MakeCodeInvalide(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "code_invalide",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewResponseData initializes result type ResponseData from viewed result type
// ResponseData.
func NewResponseData(vres *userviews.ResponseData) *ResponseData {
	var res *ResponseData
	switch vres.View {
	case "default", "":
		res = newResponseData(vres.Projected)
	}
	return res
}

// NewViewedResponseData initializes viewed result type ResponseData from
// result type ResponseData using the given view.
func NewViewedResponseData(res *ResponseData, view string) *userviews.ResponseData {
	var vres *userviews.ResponseData
	switch view {
	case "default", "":
		p := newResponseDataView(res)
		vres = &userviews.ResponseData{p, "default"}
	}
	return vres
}

// newResponseData converts projected type ResponseData to service type
// ResponseData.
func newResponseData(vres *userviews.ResponseDataView) *ResponseData {
	res := &ResponseData{}
	if vres.Code != nil {
		res.Code = *vres.Code
	}
	if vres.Message != nil {
		res.Message = *vres.Message
	}
	if vres.Data != nil {
		res.Data = *vres.Data
	}
	if vres.Code == nil {
		res.Code = 200
	}
	if vres.Message == nil {
		res.Message = "success"
	}
	return res
}

// newResponseDataView projects result type ResponseData to projected type
// ResponseDataView using the "default" view.
func newResponseDataView(res *ResponseData) *userviews.ResponseDataView {
	vres := &userviews.ResponseDataView{
		Code:    &res.Code,
		Message: &res.Message,
		Data:    &res.Data,
	}
	return vres
}
