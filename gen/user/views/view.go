// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user views
//
// Command:
// $ goa gen user-srv/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// ResponseData is the viewed result type that is projected based on a view.
type ResponseData struct {
	// Type to project
	Projected *ResponseDataView
	// View to render
	View string
}

// ResponseDataView is a type that runs validations on a projected type.
type ResponseDataView struct {
	// code
	Code *int
	// message
	Message *string
	Data    *string
}

var (
	// ResponseDataMap is a map of attribute names in result type ResponseData
	// indexed by view name.
	ResponseDataMap = map[string][]string{
		"default": []string{
			"code",
			"message",
			"data",
		},
	}
)

// ValidateResponseData runs the validations defined on the viewed result type
// ResponseData.
func ValidateResponseData(result *ResponseData) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateResponseDataView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateResponseDataView runs the validations defined on ResponseDataView
// using the "default" view.
func ValidateResponseDataView(result *ResponseDataView) (err error) {
	if result.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "result"))
	}
	if result.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "result"))
	}
	if result.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "result"))
	}
	return
}
