// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userProfile gRPC client encoders and decoders
//
// Command:
// $ goa gen user/design

package client

import (
	"context"
	user_profilepb "user/gen/grpc/user_profile/pb"
	userprofile "user/gen/user_profile"
	userprofileviews "user/gen/user_profile/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildRetrieveFunc builds the remote method to invoke for "userProfile"
// service "retrieve" endpoint.
func BuildRetrieveFunc(grpccli user_profilepb.UserProfileClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Retrieve(ctx, reqpb.(*user_profilepb.RetrieveRequest), opts...)
	}
}

// EncodeRetrieveRequest encodes requests sent to userProfile retrieve endpoint.
func EncodeRetrieveRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*userprofile.RetrievePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userProfile", "retrieve", "*userprofile.RetrievePayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewRetrieveRequest(), nil
}

// DecodeRetrieveResponse decodes responses from the userProfile retrieve
// endpoint.
func DecodeRetrieveResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*user_profilepb.RetrieveResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userProfile", "retrieve", "*user_profilepb.RetrieveResponse", v)
	}
	res := NewRetrieveResult(message)
	vres := &userprofileviews.UserProfile{Projected: res, View: view}
	if err := userprofileviews.ValidateUserProfile(vres); err != nil {
		return nil, err
	}
	return userprofile.NewUserProfile(vres), nil
}

// BuildCreateFunc builds the remote method to invoke for "userProfile" service
// "create" endpoint.
func BuildCreateFunc(grpccli user_profilepb.UserProfileClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Create(ctx, reqpb.(*user_profilepb.CreateRequest), opts...)
	}
}

// EncodeCreateRequest encodes requests sent to userProfile create endpoint.
func EncodeCreateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*userprofile.AddUser)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userProfile", "create", "*userprofile.AddUser", v)
	}
	return NewCreateRequest(payload), nil
}

// DecodeCreateResponse decodes responses from the userProfile create endpoint.
func DecodeCreateResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*user_profilepb.CreateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userProfile", "create", "*user_profilepb.CreateResponse", v)
	}
	res := NewCreateResult(message)
	return res, nil
}

// BuildSigninFunc builds the remote method to invoke for "userProfile" service
// "signin" endpoint.
func BuildSigninFunc(grpccli user_profilepb.UserProfileClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Signin(ctx, reqpb.(*user_profilepb.SigninRequest), opts...)
	}
}

// EncodeSigninRequest encodes requests sent to userProfile signin endpoint.
func EncodeSigninRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*userprofile.SigninPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userProfile", "signin", "*userprofile.SigninPayload", v)
	}
	return NewSigninRequest(payload), nil
}

// DecodeSigninResponse decodes responses from the userProfile signin endpoint.
func DecodeSigninResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*user_profilepb.SigninResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userProfile", "signin", "*user_profilepb.SigninResponse", v)
	}
	res := NewSigninResult(message)
	return res, nil
}

// BuildUpdateFunc builds the remote method to invoke for "userProfile" service
// "update" endpoint.
func BuildUpdateFunc(grpccli user_profilepb.UserProfileClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Update(ctx, reqpb.(*user_profilepb.UpdateRequest), opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to userProfile update endpoint.
func EncodeUpdateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*userprofile.UpdateUser)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userProfile", "update", "*userprofile.UpdateUser", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewUpdateRequest(payload), nil
}
