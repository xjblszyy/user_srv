// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userProfile gRPC client CLI support package
//
// Command:
// $ goa gen user/design

package client

import (
	"encoding/json"
	"fmt"
	user_profilepb "user/gen/grpc/user_profile/pb"
	userprofile "user/gen/user_profile"
)

// BuildRetrievePayload builds the payload for the userProfile retrieve
// endpoint from CLI flags.
func BuildRetrievePayload(userProfileRetrieveToken string) (*userprofile.RetrievePayload, error) {
	var token string
	{
		token = userProfileRetrieveToken
	}
	v := &userprofile.RetrievePayload{}
	v.Token = token
	return v, nil
}

// BuildCreatePayload builds the payload for the userProfile create endpoint
// from CLI flags.
func BuildCreatePayload(userProfileCreateMessage string) (*userprofile.AddUser, error) {
	var err error
	var message user_profilepb.CreateRequest
	{
		if userProfileCreateMessage != "" {
			err = json.Unmarshal([]byte(userProfileCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"email\": \"123@456.com\",\n      \"password\": \"123456\"\n   }'")
			}
		}
	}
	v := &userprofile.AddUser{
		Email:    message.Email,
		Password: message.Password,
	}
	return v, nil
}

// BuildSigninPayload builds the payload for the userProfile signin endpoint
// from CLI flags.
func BuildSigninPayload(userProfileSigninMessage string) (*userprofile.SigninPayload, error) {
	var err error
	var message user_profilepb.SigninRequest
	{
		if userProfileSigninMessage != "" {
			err = json.Unmarshal([]byte(userProfileSigninMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"email\": \"1@1.com\",\n      \"password\": \"123456\"\n   }'")
			}
		}
	}
	v := &userprofile.SigninPayload{
		Email:    message.Email,
		Password: message.Password,
	}
	return v, nil
}

// BuildUpdatePayload builds the payload for the userProfile update endpoint
// from CLI flags.
func BuildUpdatePayload(userProfileUpdateMessage string, userProfileUpdateToken string) (*userprofile.UpdateUser, error) {
	var err error
	var message user_profilepb.UpdateRequest
	{
		if userProfileUpdateMessage != "" {
			err = json.Unmarshal([]byte(userProfileUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"avator\": \"https://www.baidu.com/img/bd_logo1.png?where=super\",\n      \"nickname\": \"Bobby\"\n   }'")
			}
		}
	}
	var token string
	{
		token = userProfileUpdateToken
	}
	v := &userprofile.UpdateUser{
		Avator:   message.Avator,
		Nickname: message.Nickname,
	}
	v.Token = token
	return v, nil
}
