// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userProfile gRPC server encoders and decoders
//
// Command:
// $ goa gen user/design

package server

import (
	"context"
	"strings"
	user_profilepb "user/gen/grpc/user_profile/pb"
	userprofile "user/gen/user_profile"
	userprofileviews "user/gen/user_profile/views"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/metadata"
)

// EncodeRetrieveResponse encodes responses from the "userProfile" service
// "retrieve" endpoint.
func EncodeRetrieveResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userprofileviews.UserProfile)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userProfile", "retrieve", "*userprofileviews.UserProfile", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewRetrieveResponse(result)
	return resp, nil
}

// DecodeRetrieveRequest decodes requests sent to "userProfile" service
// "retrieve" endpoint.
func DecodeRetrieveRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		token string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			token = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var payload *userprofile.RetrievePayload
	{
		payload = NewRetrievePayload(token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}
	}
	return payload, nil
}

// EncodeCreateResponse encodes responses from the "userProfile" service
// "create" endpoint.
func EncodeCreateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userProfile", "create", "string", v)
	}
	resp := NewCreateResponse(result)
	return resp, nil
}

// DecodeCreateRequest decodes requests sent to "userProfile" service "create"
// endpoint.
func DecodeCreateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *user_profilepb.CreateRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_profilepb.CreateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("userProfile", "create", "*user_profilepb.CreateRequest", v)
		}
		if err := ValidateCreateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *userprofile.AddUser
	{
		payload = NewCreatePayload(message)
	}
	return payload, nil
}

// EncodeSigninResponse encodes responses from the "userProfile" service
// "signin" endpoint.
func EncodeSigninResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("userProfile", "signin", "string", v)
	}
	resp := NewSigninResponse(result)
	return resp, nil
}

// DecodeSigninRequest decodes requests sent to "userProfile" service "signin"
// endpoint.
func DecodeSigninRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *user_profilepb.SigninRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_profilepb.SigninRequest); !ok {
			return nil, goagrpc.ErrInvalidType("userProfile", "signin", "*user_profilepb.SigninRequest", v)
		}
	}
	var payload *userprofile.SigninPayload
	{
		payload = NewSigninPayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "userProfile" service
// "update" endpoint.
func EncodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewUpdateResponse()
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "userProfile" service "update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		token string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			token = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *user_profilepb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*user_profilepb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("userProfile", "update", "*user_profilepb.UpdateRequest", v)
		}
	}
	var payload *userprofile.UpdateUser
	{
		payload = NewUpdatePayload(message, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}
	}
	return payload, nil
}
