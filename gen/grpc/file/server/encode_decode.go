// Code generated by goa v3.0.2, DO NOT EDIT.
//
// file gRPC server encoders and decoders
//
// Command:
// $ goa gen user-srv/design

package server

import (
	"context"
	file "user-srv/gen/file"
	fileviews "user-srv/gen/file/views"
	filepb "user-srv/gen/grpc/file/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeUploadResponse encodes responses from the "file" service "upload"
// endpoint.
func EncodeUploadResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*fileviews.ResponseData)
	if !ok {
		return nil, goagrpc.ErrInvalidType("file", "upload", "*fileviews.ResponseData", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewUploadResponse(result)
	return resp, nil
}

// DecodeUploadRequest decodes requests sent to "file" service "upload"
// endpoint.
func DecodeUploadRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *filepb.UploadRequest
		ok      bool
	)
	{
		if message, ok = v.(*filepb.UploadRequest); !ok {
			return nil, goagrpc.ErrInvalidType("file", "upload", "*filepb.UploadRequest", v)
		}
	}
	var payload *file.UploadPayload
	{
		payload = NewUploadPayload(message)
	}
	return payload, nil
}
