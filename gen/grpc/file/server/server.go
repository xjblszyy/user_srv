// Code generated by goa v3.0.2, DO NOT EDIT.
//
// file gRPC server
//
// Command:
// $ goa gen user/design

package server

import (
	"context"
	file "user/gen/file"
	filepb "user/gen/grpc/file/pb"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the filepb.FileServer interface.
type Server struct {
	UploadH goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the file service endpoints.
func New(e *file.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		UploadH: NewUploadHandler(e.Upload, uh),
	}
}

// NewUploadHandler creates a gRPC handler which serves the "file" service
// "upload" endpoint.
func NewUploadHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUploadRequest, EncodeUploadResponse)
	}
	return h
}

// Upload implements the "Upload" method in filepb.FileServer interface.
func (s *Server) Upload(ctx context.Context, message *filepb.UploadRequest) (*filepb.UploadResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "upload")
	ctx = context.WithValue(ctx, goa.ServiceKey, "file")
	resp, err := s.UploadH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "file_upload_err":
				er := err.(*file.FileUploadErr)
				return nil, goagrpc.NewStatusError(codes.NotFound, err, NewUploadFileUploadErrError(er))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*filepb.UploadResponse), nil
}
