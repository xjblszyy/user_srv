// Code generated by goa v3.0.2, DO NOT EDIT.
//
// file gRPC client encoders and decoders
//
// Command:
// $ goa gen user-srv/design

package client

import (
	"context"
	file "user-srv/gen/file"
	fileviews "user-srv/gen/file/views"
	filepb "user-srv/gen/grpc/file/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildUploadFunc builds the remote method to invoke for "file" service
// "upload" endpoint.
func BuildUploadFunc(grpccli filepb.FileClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Upload(ctx, reqpb.(*filepb.UploadRequest), opts...)
	}
}

// EncodeUploadRequest encodes requests sent to file upload endpoint.
func EncodeUploadRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*file.UploadPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("file", "upload", "*file.UploadPayload", v)
	}
	return NewUploadRequest(payload), nil
}

// DecodeUploadResponse decodes responses from the file upload endpoint.
func DecodeUploadResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*filepb.UploadResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("file", "upload", "*filepb.UploadResponse", v)
	}
	res := NewUploadResult(message)
	vres := &fileviews.ResponseData{Projected: res, View: view}
	if err := fileviews.ValidateResponseData(vres); err != nil {
		return nil, err
	}
	return file.NewResponseData(vres), nil
}
