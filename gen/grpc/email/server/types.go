// Code generated by goa v3.0.2, DO NOT EDIT.
//
// email gRPC server types
//
// Command:
// $ goa gen user/design

package server

import (
	email "user/gen/email"
	emailpb "user/gen/grpc/email/pb"

	goa "goa.design/goa/v3/pkg"
)

// NewActivePayload builds the payload of the "active" endpoint of the "email"
// service from the gRPC request type.
func NewActivePayload(message *emailpb.ActiveRequest) *email.ActivePayload {
	v := &email.ActivePayload{
		Code: message.Code,
	}
	return v
}

// NewActiveResponse builds the gRPC response type from the result of the
// "active" endpoint of the "email" service.
func NewActiveResponse(result string) *emailpb.ActiveResponse {
	message := &emailpb.ActiveResponse{}
	message.Field = result
	return message
}

// NewActiveInvalideCodeError builds the gRPC error response type from the
// error of the "active" endpoint of the "email" service.
func NewActiveInvalideCodeError(er *email.EmailInvalide) *emailpb.ActiveInvalideCodeError {
	message := &emailpb.ActiveInvalideCodeError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}

// NewSendEmailPayload builds the payload of the "send_email" endpoint of the
// "email" service from the gRPC request type.
func NewSendEmailPayload(message *emailpb.SendEmailRequest) *email.SendEmailPayload {
	v := &email.SendEmailPayload{
		Email: message.Email,
	}
	return v
}

// NewSendEmailResponse builds the gRPC response type from the result of the
// "send_email" endpoint of the "email" service.
func NewSendEmailResponse(result string) *emailpb.SendEmailResponse {
	message := &emailpb.SendEmailResponse{}
	message.Field = result
	return message
}

// NewSendEmailInvalideEmailError builds the gRPC error response type from the
// error of the "send_email" endpoint of the "email" service.
func NewSendEmailInvalideEmailError(er *email.EmailInvalide) *emailpb.SendEmailInvalideEmailError {
	message := &emailpb.SendEmailInvalideEmailError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}

// NewSendEmailEmailNotFoundError builds the gRPC error response type from the
// error of the "send_email" endpoint of the "email" service.
func NewSendEmailEmailNotFoundError(er *email.EmailNotFound) *emailpb.SendEmailEmailNotFoundError {
	message := &emailpb.SendEmailEmailNotFoundError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}

// ValidateSendEmailRequest runs the validations defined on SendEmailRequest.
func ValidateSendEmailRequest(message *emailpb.SendEmailRequest) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("message.email", message.Email, "\\S+@\\S+\\.\\S+"))
	return
}
