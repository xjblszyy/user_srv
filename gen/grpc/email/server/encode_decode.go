// Code generated by goa v3.0.2, DO NOT EDIT.
//
// email gRPC server encoders and decoders
//
// Command:
// $ goa gen user/design

package server

import (
	"context"
	email "user/gen/email"
	emailpb "user/gen/grpc/email/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeActiveResponse encodes responses from the "email" service "active"
// endpoint.
func EncodeActiveResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("email", "active", "string", v)
	}
	resp := NewActiveResponse(result)
	return resp, nil
}

// DecodeActiveRequest decodes requests sent to "email" service "active"
// endpoint.
func DecodeActiveRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *emailpb.ActiveRequest
		ok      bool
	)
	{
		if message, ok = v.(*emailpb.ActiveRequest); !ok {
			return nil, goagrpc.ErrInvalidType("email", "active", "*emailpb.ActiveRequest", v)
		}
	}
	var payload *email.ActivePayload
	{
		payload = NewActivePayload(message)
	}
	return payload, nil
}

// EncodeSendEmailResponse encodes responses from the "email" service
// "send_email" endpoint.
func EncodeSendEmailResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("email", "send_email", "string", v)
	}
	resp := NewSendEmailResponse(result)
	return resp, nil
}

// DecodeSendEmailRequest decodes requests sent to "email" service "send_email"
// endpoint.
func DecodeSendEmailRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *emailpb.SendEmailRequest
		ok      bool
	)
	{
		if message, ok = v.(*emailpb.SendEmailRequest); !ok {
			return nil, goagrpc.ErrInvalidType("email", "send_email", "*emailpb.SendEmailRequest", v)
		}
		if err := ValidateSendEmailRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *email.SendEmailPayload
	{
		payload = NewSendEmailPayload(message)
	}
	return payload, nil
}
