// Code generated by goa v3.0.2, DO NOT EDIT.
//
// email gRPC client encoders and decoders
//
// Command:
// $ goa gen user/design

package client

import (
	"context"
	email "user/gen/email"
	emailpb "user/gen/grpc/email/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildActiveFunc builds the remote method to invoke for "email" service
// "active" endpoint.
func BuildActiveFunc(grpccli emailpb.EmailClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Active(ctx, reqpb.(*emailpb.ActiveRequest), opts...)
	}
}

// EncodeActiveRequest encodes requests sent to email active endpoint.
func EncodeActiveRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*email.ActivePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("email", "active", "*email.ActivePayload", v)
	}
	return NewActiveRequest(payload), nil
}

// DecodeActiveResponse decodes responses from the email active endpoint.
func DecodeActiveResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*emailpb.ActiveResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("email", "active", "*emailpb.ActiveResponse", v)
	}
	res := NewActiveResult(message)
	return res, nil
}

// BuildSendEmailFunc builds the remote method to invoke for "email" service
// "send_email" endpoint.
func BuildSendEmailFunc(grpccli emailpb.EmailClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.SendEmail(ctx, reqpb.(*emailpb.SendEmailRequest), opts...)
	}
}

// EncodeSendEmailRequest encodes requests sent to email send_email endpoint.
func EncodeSendEmailRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*email.SendEmailPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("email", "send_email", "*email.SendEmailPayload", v)
	}
	return NewSendEmailRequest(payload), nil
}

// DecodeSendEmailResponse decodes responses from the email send_email endpoint.
func DecodeSendEmailResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*emailpb.SendEmailResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("email", "send_email", "*emailpb.SendEmailResponse", v)
	}
	res := NewSendEmailResult(message)
	return res, nil
}
