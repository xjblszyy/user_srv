// Code generated by goa v3.0.2, DO NOT EDIT.
//
// email gRPC client CLI support package
//
// Command:
// $ goa gen user/design

package client

import (
	"encoding/json"
	"fmt"
	email "user/gen/email"
	emailpb "user/gen/grpc/email/pb"
)

// BuildActivePayload builds the payload for the email active endpoint from CLI
// flags.
func BuildActivePayload(emailActiveMessage string) (*email.ActivePayload, error) {
	var err error
	var message emailpb.ActiveRequest
	{
		if emailActiveMessage != "" {
			err = json.Unmarshal([]byte(emailActiveMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"code\": \"Fuga velit corporis.\"\n   }'")
			}
		}
	}
	v := &email.ActivePayload{
		Code: message.Code,
	}
	return v, nil
}

// BuildSendEmailPayload builds the payload for the email send_email endpoint
// from CLI flags.
func BuildSendEmailPayload(emailSendEmailMessage string) (*email.SendEmailPayload, error) {
	var err error
	var message emailpb.SendEmailRequest
	{
		if emailSendEmailMessage != "" {
			err = json.Unmarshal([]byte(emailSendEmailMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"email\": \"123@456.com\"\n   }'")
			}
		}
	}
	v := &email.SendEmailPayload{
		Email: message.Email,
	}
	return v, nil
}
