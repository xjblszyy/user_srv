// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user gRPC client types
//
// Command:
// $ goa gen user-srv/design

package client

import (
	userpb "user-srv/gen/grpc/user/pb"
	user "user-srv/gen/user"
	userviews "user-srv/gen/user/views"
)

// NewRetrieveRequest builds the gRPC request type from the payload of the
// "retrieve" endpoint of the "user" service.
func NewRetrieveRequest() *userpb.RetrieveRequest {
	message := &userpb.RetrieveRequest{}
	return message
}

// NewRetrieveResult builds the result type of the "retrieve" endpoint of the
// "user" service from the gRPC response type.
func NewRetrieveResult(message *userpb.RetrieveResponse) *userviews.ResponseDataView {
	result := &userviews.ResponseDataView{
		Message: &message.Message_,
		Data:    &message.Data,
	}
	codeptr := int(message.Code)
	result.Code = &codeptr
	return result
}

// NewCreateRequest builds the gRPC request type from the payload of the
// "create" endpoint of the "user" service.
func NewCreateRequest(payload *user.AddUser) *userpb.CreateRequest {
	message := &userpb.CreateRequest{
		Email:    payload.Email,
		Password: payload.Password,
	}
	return message
}

// NewCreateResult builds the result type of the "create" endpoint of the
// "user" service from the gRPC response type.
func NewCreateResult(message *userpb.CreateResponse) *userviews.ResponseDataView {
	result := &userviews.ResponseDataView{
		Message: &message.Message_,
		Data:    &message.Data,
	}
	codeptr := int(message.Code)
	result.Code = &codeptr
	return result
}

// NewSigninRequest builds the gRPC request type from the payload of the
// "signin" endpoint of the "user" service.
func NewSigninRequest(payload *user.Signin) *userpb.SigninRequest {
	message := &userpb.SigninRequest{
		Email:    payload.Email,
		Password: payload.Password,
	}
	return message
}

// NewSigninResult builds the result type of the "signin" endpoint of the
// "user" service from the gRPC response type.
func NewSigninResult(message *userpb.SigninResponse) *userviews.ResponseDataView {
	result := &userviews.ResponseDataView{
		Message: &message.Message_,
		Data:    &message.Data,
	}
	codeptr := int(message.Code)
	result.Code = &codeptr
	return result
}

// NewUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "user" service.
func NewUpdateRequest(payload *user.UpdateUser) *userpb.UpdateRequest {
	message := &userpb.UpdateRequest{
		Avatar:   payload.Avatar,
		Nickname: payload.Nickname,
	}
	return message
}

// NewSendEmailRequest builds the gRPC request type from the payload of the
// "sendEmail" endpoint of the "user" service.
func NewSendEmailRequest(payload *user.SendEmail) *userpb.SendEmailRequest {
	message := &userpb.SendEmailRequest{
		Email: payload.Email,
	}
	return message
}

// NewSendEmailResult builds the result type of the "sendEmail" endpoint of the
// "user" service from the gRPC response type.
func NewSendEmailResult(message *userpb.SendEmailResponse) *userviews.ResponseDataView {
	result := &userviews.ResponseDataView{
		Message: &message.Message_,
		Data:    &message.Data,
	}
	codeptr := int(message.Code)
	result.Code = &codeptr
	return result
}

// NewActiveEmailRequest builds the gRPC request type from the payload of the
// "activeEmail" endpoint of the "user" service.
func NewActiveEmailRequest(payload *user.EmailCode) *userpb.ActiveEmailRequest {
	message := &userpb.ActiveEmailRequest{
		Code: payload.Code,
	}
	return message
}

// NewActiveEmailResult builds the result type of the "activeEmail" endpoint of
// the "user" service from the gRPC response type.
func NewActiveEmailResult(message *userpb.ActiveEmailResponse) *userviews.ResponseDataView {
	result := &userviews.ResponseDataView{
		Message: &message.Message_,
		Data:    &message.Data,
	}
	codeptr := int(message.Code)
	result.Code = &codeptr
	return result
}
