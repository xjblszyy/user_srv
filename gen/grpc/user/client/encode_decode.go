// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user gRPC client encoders and decoders
//
// Command:
// $ goa gen user-srv/design

package client

import (
	"context"
	userpb "user-srv/gen/grpc/user/pb"
	user "user-srv/gen/user"
	userviews "user-srv/gen/user/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildRetrieveFunc builds the remote method to invoke for "user" service
// "retrieve" endpoint.
func BuildRetrieveFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Retrieve(ctx, reqpb.(*userpb.RetrieveRequest), opts...)
	}
}

// EncodeRetrieveRequest encodes requests sent to user retrieve endpoint.
func EncodeRetrieveRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*user.RetrievePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "retrieve", "*user.RetrievePayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewRetrieveRequest(), nil
}

// DecodeRetrieveResponse decodes responses from the user retrieve endpoint.
func DecodeRetrieveResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*userpb.RetrieveResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "retrieve", "*userpb.RetrieveResponse", v)
	}
	res := NewRetrieveResult(message)
	vres := &userviews.ResponseData{Projected: res, View: view}
	if err := userviews.ValidateResponseData(vres); err != nil {
		return nil, err
	}
	return user.NewResponseData(vres), nil
}

// BuildCreateFunc builds the remote method to invoke for "user" service
// "create" endpoint.
func BuildCreateFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Create(ctx, reqpb.(*userpb.CreateRequest), opts...)
	}
}

// EncodeCreateRequest encodes requests sent to user create endpoint.
func EncodeCreateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*user.AddUser)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "create", "*user.AddUser", v)
	}
	return NewCreateRequest(payload), nil
}

// DecodeCreateResponse decodes responses from the user create endpoint.
func DecodeCreateResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*userpb.CreateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "create", "*userpb.CreateResponse", v)
	}
	res := NewCreateResult(message)
	vres := &userviews.ResponseData{Projected: res, View: view}
	if err := userviews.ValidateResponseData(vres); err != nil {
		return nil, err
	}
	return user.NewResponseData(vres), nil
}

// BuildSigninFunc builds the remote method to invoke for "user" service
// "signin" endpoint.
func BuildSigninFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Signin(ctx, reqpb.(*userpb.SigninRequest), opts...)
	}
}

// EncodeSigninRequest encodes requests sent to user signin endpoint.
func EncodeSigninRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*user.Signin)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "signin", "*user.Signin", v)
	}
	return NewSigninRequest(payload), nil
}

// DecodeSigninResponse decodes responses from the user signin endpoint.
func DecodeSigninResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*userpb.SigninResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "signin", "*userpb.SigninResponse", v)
	}
	res := NewSigninResult(message)
	vres := &userviews.ResponseData{Projected: res, View: view}
	if err := userviews.ValidateResponseData(vres); err != nil {
		return nil, err
	}
	return user.NewResponseData(vres), nil
}

// BuildUpdateFunc builds the remote method to invoke for "user" service
// "update" endpoint.
func BuildUpdateFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.Update(ctx, reqpb.(*userpb.UpdateRequest), opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to user update endpoint.
func EncodeUpdateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*user.UpdateUser)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "update", "*user.UpdateUser", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewUpdateRequest(payload), nil
}

// BuildSendEmailFunc builds the remote method to invoke for "user" service
// "sendEmail" endpoint.
func BuildSendEmailFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.SendEmail(ctx, reqpb.(*userpb.SendEmailRequest), opts...)
	}
}

// EncodeSendEmailRequest encodes requests sent to user sendEmail endpoint.
func EncodeSendEmailRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*user.SendEmail)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "sendEmail", "*user.SendEmail", v)
	}
	return NewSendEmailRequest(payload), nil
}

// DecodeSendEmailResponse decodes responses from the user sendEmail endpoint.
func DecodeSendEmailResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*userpb.SendEmailResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "sendEmail", "*userpb.SendEmailResponse", v)
	}
	res := NewSendEmailResult(message)
	vres := &userviews.ResponseData{Projected: res, View: view}
	if err := userviews.ValidateResponseData(vres); err != nil {
		return nil, err
	}
	return user.NewResponseData(vres), nil
}

// BuildActiveEmailFunc builds the remote method to invoke for "user" service
// "activeEmail" endpoint.
func BuildActiveEmailFunc(grpccli userpb.UserClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		return grpccli.ActiveEmail(ctx, reqpb.(*userpb.ActiveEmailRequest), opts...)
	}
}

// EncodeActiveEmailRequest encodes requests sent to user activeEmail endpoint.
func EncodeActiveEmailRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*user.EmailCode)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "activeEmail", "*user.EmailCode", v)
	}
	return NewActiveEmailRequest(payload), nil
}

// DecodeActiveEmailResponse decodes responses from the user activeEmail
// endpoint.
func DecodeActiveEmailResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*userpb.ActiveEmailResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "activeEmail", "*userpb.ActiveEmailResponse", v)
	}
	res := NewActiveEmailResult(message)
	vres := &userviews.ResponseData{Projected: res, View: view}
	if err := userviews.ValidateResponseData(vres); err != nil {
		return nil, err
	}
	return user.NewResponseData(vres), nil
}
