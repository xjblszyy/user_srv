// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user gRPC client CLI support package
//
// Command:
// $ goa gen user-srv/design

package client

import (
	"encoding/json"
	"fmt"
	userpb "user-srv/gen/grpc/user/pb"
	user "user-srv/gen/user"
)

// BuildRetrievePayload builds the payload for the user retrieve endpoint from
// CLI flags.
func BuildRetrievePayload(userRetrieveToken string) (*user.RetrievePayload, error) {
	var token string
	{
		token = userRetrieveToken
	}
	v := &user.RetrievePayload{}
	v.Token = token
	return v, nil
}

// BuildCreatePayload builds the payload for the user create endpoint from CLI
// flags.
func BuildCreatePayload(userCreateMessage string) (*user.AddUser, error) {
	var err error
	var message userpb.CreateRequest
	{
		if userCreateMessage != "" {
			err = json.Unmarshal([]byte(userCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"email\": \"123@456.com\",\n      \"password\": \"123456\"\n   }'")
			}
		}
	}
	v := &user.AddUser{
		Email:    message.Email,
		Password: message.Password,
	}
	return v, nil
}

// BuildSigninPayload builds the payload for the user signin endpoint from CLI
// flags.
func BuildSigninPayload(userSigninMessage string) (*user.Signin, error) {
	var err error
	var message userpb.SigninRequest
	{
		if userSigninMessage != "" {
			err = json.Unmarshal([]byte(userSigninMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"email\": \"1@1.com\",\n      \"password\": \"123456\"\n   }'")
			}
		}
	}
	v := &user.Signin{
		Email:    message.Email,
		Password: message.Password,
	}
	return v, nil
}

// BuildUpdatePayload builds the payload for the user update endpoint from CLI
// flags.
func BuildUpdatePayload(userUpdateMessage string, userUpdateToken string) (*user.UpdateUser, error) {
	var err error
	var message userpb.UpdateRequest
	{
		if userUpdateMessage != "" {
			err = json.Unmarshal([]byte(userUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"avatar\": \"https://www.baidu.com/img/bd_logo1.png?where=super\",\n      \"nickname\": \"Bobby\"\n   }'")
			}
		}
	}
	var token string
	{
		token = userUpdateToken
	}
	v := &user.UpdateUser{
		Avatar:   message.Avatar,
		Nickname: message.Nickname,
	}
	v.Token = token
	return v, nil
}

// BuildSendEmailPayload builds the payload for the user sendEmail endpoint
// from CLI flags.
func BuildSendEmailPayload(userSendEmailMessage string) (*user.SendEmail, error) {
	var err error
	var message userpb.SendEmailRequest
	{
		if userSendEmailMessage != "" {
			err = json.Unmarshal([]byte(userSendEmailMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"email\": \"123@456.com\"\n   }'")
			}
		}
	}
	v := &user.SendEmail{
		Email: message.Email,
	}
	return v, nil
}

// BuildActiveEmailPayload builds the payload for the user activeEmail endpoint
// from CLI flags.
func BuildActiveEmailPayload(userActiveEmailMessage string) (*user.EmailCode, error) {
	var err error
	var message userpb.ActiveEmailRequest
	{
		if userActiveEmailMessage != "" {
			err = json.Unmarshal([]byte(userActiveEmailMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"code\": \"123456\"\n   }'")
			}
		}
	}
	v := &user.EmailCode{
		Code: message.Code,
	}
	return v, nil
}
