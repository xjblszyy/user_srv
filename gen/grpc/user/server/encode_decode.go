// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user gRPC server encoders and decoders
//
// Command:
// $ goa gen user-srv/design

package server

import (
	"context"
	"strings"
	userpb "user-srv/gen/grpc/user/pb"
	user "user-srv/gen/user"
	userviews "user-srv/gen/user/views"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/metadata"
)

// EncodeRetrieveResponse encodes responses from the "user" service "retrieve"
// endpoint.
func EncodeRetrieveResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userviews.ResponseData)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "retrieve", "*userviews.ResponseData", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewRetrieveResponse(result)
	return resp, nil
}

// DecodeRetrieveRequest decodes requests sent to "user" service "retrieve"
// endpoint.
func DecodeRetrieveRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		token string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			token = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var payload *user.RetrievePayload
	{
		payload = NewRetrievePayload(token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}
	}
	return payload, nil
}

// EncodeCreateResponse encodes responses from the "user" service "create"
// endpoint.
func EncodeCreateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userviews.ResponseData)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "create", "*userviews.ResponseData", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewCreateResponse(result)
	return resp, nil
}

// DecodeCreateRequest decodes requests sent to "user" service "create"
// endpoint.
func DecodeCreateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *userpb.CreateRequest
		ok      bool
	)
	{
		if message, ok = v.(*userpb.CreateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user", "create", "*userpb.CreateRequest", v)
		}
		if err := ValidateCreateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *user.AddUser
	{
		payload = NewCreatePayload(message)
	}
	return payload, nil
}

// EncodeSigninResponse encodes responses from the "user" service "signin"
// endpoint.
func EncodeSigninResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userviews.ResponseData)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "signin", "*userviews.ResponseData", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewSigninResponse(result)
	return resp, nil
}

// DecodeSigninRequest decodes requests sent to "user" service "signin"
// endpoint.
func DecodeSigninRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *userpb.SigninRequest
		ok      bool
	)
	{
		if message, ok = v.(*userpb.SigninRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user", "signin", "*userpb.SigninRequest", v)
		}
	}
	var payload *user.Signin
	{
		payload = NewSigninPayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "user" service "update"
// endpoint.
func EncodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewUpdateResponse()
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "user" service "update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		token string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			token = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *userpb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*userpb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user", "update", "*userpb.UpdateRequest", v)
		}
	}
	var payload *user.UpdateUser
	{
		payload = NewUpdatePayload(message, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}
	}
	return payload, nil
}

// EncodeSendEmailResponse encodes responses from the "user" service
// "sendEmail" endpoint.
func EncodeSendEmailResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userviews.ResponseData)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "sendEmail", "*userviews.ResponseData", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewSendEmailResponse(result)
	return resp, nil
}

// DecodeSendEmailRequest decodes requests sent to "user" service "sendEmail"
// endpoint.
func DecodeSendEmailRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *userpb.SendEmailRequest
		ok      bool
	)
	{
		if message, ok = v.(*userpb.SendEmailRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user", "sendEmail", "*userpb.SendEmailRequest", v)
		}
		if err := ValidateSendEmailRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *user.SendEmail
	{
		payload = NewSendEmailPayload(message)
	}
	return payload, nil
}

// EncodeActiveEmailResponse encodes responses from the "user" service
// "activeEmail" endpoint.
func EncodeActiveEmailResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	vres, ok := v.(*userviews.ResponseData)
	if !ok {
		return nil, goagrpc.ErrInvalidType("user", "activeEmail", "*userviews.ResponseData", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewActiveEmailResponse(result)
	return resp, nil
}

// DecodeActiveEmailRequest decodes requests sent to "user" service
// "activeEmail" endpoint.
func DecodeActiveEmailRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *userpb.ActiveEmailRequest
		ok      bool
	)
	{
		if message, ok = v.(*userpb.ActiveEmailRequest); !ok {
			return nil, goagrpc.ErrInvalidType("user", "activeEmail", "*userpb.ActiveEmailRequest", v)
		}
	}
	var payload *user.EmailCode
	{
		payload = NewActiveEmailPayload(message)
	}
	return payload, nil
}
