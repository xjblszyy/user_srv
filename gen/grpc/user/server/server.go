// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user gRPC server
//
// Command:
// $ goa gen user-srv/design

package server

import (
	"context"
	userpb "user-srv/gen/grpc/user/pb"
	user "user-srv/gen/user"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the userpb.UserServer interface.
type Server struct {
	RetrieveH    goagrpc.UnaryHandler
	CreateH      goagrpc.UnaryHandler
	SigninH      goagrpc.UnaryHandler
	UpdateH      goagrpc.UnaryHandler
	SendEmailH   goagrpc.UnaryHandler
	ActiveEmailH goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the user service endpoints.
func New(e *user.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		RetrieveH:    NewRetrieveHandler(e.Retrieve, uh),
		CreateH:      NewCreateHandler(e.Create, uh),
		SigninH:      NewSigninHandler(e.Signin, uh),
		UpdateH:      NewUpdateHandler(e.Update, uh),
		SendEmailH:   NewSendEmailHandler(e.SendEmail, uh),
		ActiveEmailH: NewActiveEmailHandler(e.ActiveEmail, uh),
	}
}

// NewRetrieveHandler creates a gRPC handler which serves the "user" service
// "retrieve" endpoint.
func NewRetrieveHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeRetrieveRequest, EncodeRetrieveResponse)
	}
	return h
}

// Retrieve implements the "Retrieve" method in userpb.UserServer interface.
func (s *Server) Retrieve(ctx context.Context, message *userpb.RetrieveRequest) (*userpb.RetrieveResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "retrieve")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.RetrieveH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "invalide_token":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.RetrieveResponse), nil
}

// NewCreateHandler creates a gRPC handler which serves the "user" service
// "create" endpoint.
func NewCreateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCreateRequest, EncodeCreateResponse)
	}
	return h
}

// Create implements the "Create" method in userpb.UserServer interface.
func (s *Server) Create(ctx context.Context, message *userpb.CreateRequest) (*userpb.CreateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "create")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.CreateH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "email_exist":
				return nil, goagrpc.NewStatusError(codes.AlreadyExists, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.CreateResponse), nil
}

// NewSigninHandler creates a gRPC handler which serves the "user" service
// "signin" endpoint.
func NewSigninHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSigninRequest, EncodeSigninResponse)
	}
	return h
}

// Signin implements the "Signin" method in userpb.UserServer interface.
func (s *Server) Signin(ctx context.Context, message *userpb.SigninRequest) (*userpb.SigninResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "signin")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.SigninH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "email_or_password_error":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.SigninResponse), nil
}

// NewUpdateHandler creates a gRPC handler which serves the "user" service
// "update" endpoint.
func NewUpdateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUpdateRequest, EncodeUpdateResponse)
	}
	return h
}

// Update implements the "Update" method in userpb.UserServer interface.
func (s *Server) Update(ctx context.Context, message *userpb.UpdateRequest) (*userpb.UpdateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "update")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.UpdateH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "invalide_token":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.UpdateResponse), nil
}

// NewSendEmailHandler creates a gRPC handler which serves the "user" service
// "sendEmail" endpoint.
func NewSendEmailHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSendEmailRequest, EncodeSendEmailResponse)
	}
	return h
}

// SendEmail implements the "SendEmail" method in userpb.UserServer interface.
func (s *Server) SendEmail(ctx context.Context, message *userpb.SendEmailRequest) (*userpb.SendEmailResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "sendEmail")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.SendEmailH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "email_not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.SendEmailResponse), nil
}

// NewActiveEmailHandler creates a gRPC handler which serves the "user" service
// "activeEmail" endpoint.
func NewActiveEmailHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeActiveEmailRequest, EncodeActiveEmailResponse)
	}
	return h
}

// ActiveEmail implements the "ActiveEmail" method in userpb.UserServer
// interface.
func (s *Server) ActiveEmail(ctx context.Context, message *userpb.ActiveEmailRequest) (*userpb.ActiveEmailResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "activeEmail")
	ctx = context.WithValue(ctx, goa.ServiceKey, "user")
	resp, err := s.ActiveEmailH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "code_invalide":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userpb.ActiveEmailResponse), nil
}
