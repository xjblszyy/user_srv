// Code generated by goa v3.0.2, DO NOT EDIT.
//
// file HTTP client types
//
// Command:
// $ goa gen user/design

package client

import (
	file "user/gen/file"

	goa "goa.design/goa/v3/pkg"
)

// UploadRequestBody is the type of the "file" service "upload" endpoint HTTP
// request body.
type UploadRequestBody struct {
	// file
	File string `form:"file" json:"file" xml:"file"`
}

// UploadFileUploadErrResponseBody is the type of the "file" service "upload"
// endpoint HTTP response body for the "file_upload_err" error.
type UploadFileUploadErrResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// NewUploadRequestBody builds the HTTP request body from the payload of the
// "upload" endpoint of the "file" service.
func NewUploadRequestBody(p *file.UploadPayload) *UploadRequestBody {
	body := &UploadRequestBody{
		File: p.File,
	}
	return body
}

// NewUploadFileUploadErr builds a file service upload endpoint file_upload_err
// error.
func NewUploadFileUploadErr(body *UploadFileUploadErrResponseBody) *file.FileUploadErr {
	v := &file.FileUploadErr{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// ValidateUploadFileUploadErrResponseBody runs the validations defined on
// upload_file_upload_err_response_body
func ValidateUploadFileUploadErrResponseBody(body *UploadFileUploadErrResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}
