// Code generated by goa v3.0.2, DO NOT EDIT.
//
// email HTTP client types
//
// Command:
// $ goa gen user/design

package client

import (
	email "user/gen/email"

	goa "goa.design/goa/v3/pkg"
)

// SendEmailRequestBody is the type of the "email" service "send_email"
// endpoint HTTP request body.
type SendEmailRequestBody struct {
	// email of userProfile
	Email string `form:"email" json:"email" xml:"email"`
}

// ActiveInvalideCodeResponseBody is the type of the "email" service "active"
// endpoint HTTP response body for the "invalide_code" error.
type ActiveInvalideCodeResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendEmailInvalideEmailResponseBody is the type of the "email" service
// "send_email" endpoint HTTP response body for the "invalide_email" error.
type SendEmailInvalideEmailResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SendEmailEmailNotFoundResponseBody is the type of the "email" service
// "send_email" endpoint HTTP response body for the "email_not_found" error.
type SendEmailEmailNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// NewSendEmailRequestBody builds the HTTP request body from the payload of the
// "send_email" endpoint of the "email" service.
func NewSendEmailRequestBody(p *email.SendEmailPayload) *SendEmailRequestBody {
	body := &SendEmailRequestBody{
		Email: p.Email,
	}
	return body
}

// NewActiveInvalideCode builds a email service active endpoint invalide_code
// error.
func NewActiveInvalideCode(body *ActiveInvalideCodeResponseBody) *email.EmailInvalide {
	v := &email.EmailInvalide{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// NewSendEmailInvalideEmail builds a email service send_email endpoint
// invalide_email error.
func NewSendEmailInvalideEmail(body *SendEmailInvalideEmailResponseBody) *email.EmailInvalide {
	v := &email.EmailInvalide{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// NewSendEmailEmailNotFound builds a email service send_email endpoint
// email_not_found error.
func NewSendEmailEmailNotFound(body *SendEmailEmailNotFoundResponseBody) *email.EmailNotFound {
	v := &email.EmailNotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// ValidateActiveInvalideCodeResponseBody runs the validations defined on
// active_invalide_code_response_body
func ValidateActiveInvalideCodeResponseBody(body *ActiveInvalideCodeResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateSendEmailInvalideEmailResponseBody runs the validations defined on
// send_email_invalide_email_response_body
func ValidateSendEmailInvalideEmailResponseBody(body *SendEmailInvalideEmailResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateSendEmailEmailNotFoundResponseBody runs the validations defined on
// send_email_email_not_found_response_body
func ValidateSendEmailEmailNotFoundResponseBody(body *SendEmailEmailNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}
