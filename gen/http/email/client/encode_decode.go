// Code generated by goa v3.0.2, DO NOT EDIT.
//
// email HTTP client encoders and decoders
//
// Command:
// $ goa gen user/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	email "user/gen/email"

	goahttp "goa.design/goa/v3/http"
)

// BuildActiveRequest instantiates a HTTP request object with method and path
// set to call the "email" service "active" endpoint
func (c *Client) BuildActiveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		code string
	)
	{
		p, ok := v.(*email.ActivePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("email", "active", "*email.ActivePayload", v)
		}
		code = p.Code
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ActiveEmailPath(code)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("email", "active", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeActiveResponse returns a decoder for responses returned by the email
// active endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeActiveResponse may return the following errors:
//	- "invalide_code" (type *email.EmailInvalide): http.StatusBadRequest
//	- error: internal error
func DecodeActiveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "active", err)
			}
			return body, nil
		case http.StatusBadRequest:
			var (
				body ActiveInvalideCodeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "active", err)
			}
			err = ValidateActiveInvalideCodeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("email", "active", err)
			}
			return nil, NewActiveInvalideCode(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("email", "active", resp.StatusCode, string(body))
		}
	}
}

// BuildSendEmailRequest instantiates a HTTP request object with method and
// path set to call the "email" service "send_email" endpoint
func (c *Client) BuildSendEmailRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SendEmailEmailPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("email", "send_email", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSendEmailRequest returns an encoder for requests sent to the email
// send_email server.
func EncodeSendEmailRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*email.SendEmailPayload)
		if !ok {
			return goahttp.ErrInvalidType("email", "send_email", "*email.SendEmailPayload", v)
		}
		body := NewSendEmailRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("email", "send_email", err)
		}
		return nil
	}
}

// DecodeSendEmailResponse returns a decoder for responses returned by the
// email send_email endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSendEmailResponse may return the following errors:
//	- "invalide_email" (type *email.EmailInvalide): http.StatusBadRequest
//	- "email_not_found" (type *email.EmailNotFound): http.StatusBadRequest
//	- error: internal error
func DecodeSendEmailResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("email", "send_email", err)
			}
			return body, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "invalide_email":
				var (
					body SendEmailInvalideEmailResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("email", "send_email", err)
				}
				err = ValidateSendEmailInvalideEmailResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("email", "send_email", err)
				}
				return nil, NewSendEmailInvalideEmail(&body)
			case "email_not_found":
				var (
					body SendEmailEmailNotFoundResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("email", "send_email", err)
				}
				err = ValidateSendEmailEmailNotFoundResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("email", "send_email", err)
				}
				return nil, NewSendEmailEmailNotFound(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("email", "send_email", resp.StatusCode, string(body))
			}
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("email", "send_email", resp.StatusCode, string(body))
		}
	}
}
