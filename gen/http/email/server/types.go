// Code generated by goa v3.0.2, DO NOT EDIT.
//
// email HTTP server types
//
// Command:
// $ goa gen user/design

package server

import (
	email "user/gen/email"

	goa "goa.design/goa/v3/pkg"
)

// SendEmailRequestBody is the type of the "email" service "send_email"
// endpoint HTTP request body.
type SendEmailRequestBody struct {
	// email of userProfile
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// ActiveInvalideCodeResponseBody is the type of the "email" service "active"
// endpoint HTTP response body for the "invalide_code" error.
type ActiveInvalideCodeResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing user
	ID string `form:"id" json:"id" xml:"id"`
}

// SendEmailInvalideEmailResponseBody is the type of the "email" service
// "send_email" endpoint HTTP response body for the "invalide_email" error.
type SendEmailInvalideEmailResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing user
	ID string `form:"id" json:"id" xml:"id"`
}

// SendEmailEmailNotFoundResponseBody is the type of the "email" service
// "send_email" endpoint HTTP response body for the "email_not_found" error.
type SendEmailEmailNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing user
	ID string `form:"id" json:"id" xml:"id"`
}

// NewActiveInvalideCodeResponseBody builds the HTTP response body from the
// result of the "active" endpoint of the "email" service.
func NewActiveInvalideCodeResponseBody(res *email.EmailInvalide) *ActiveInvalideCodeResponseBody {
	body := &ActiveInvalideCodeResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewSendEmailInvalideEmailResponseBody builds the HTTP response body from the
// result of the "send_email" endpoint of the "email" service.
func NewSendEmailInvalideEmailResponseBody(res *email.EmailInvalide) *SendEmailInvalideEmailResponseBody {
	body := &SendEmailInvalideEmailResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewSendEmailEmailNotFoundResponseBody builds the HTTP response body from the
// result of the "send_email" endpoint of the "email" service.
func NewSendEmailEmailNotFoundResponseBody(res *email.EmailNotFound) *SendEmailEmailNotFoundResponseBody {
	body := &SendEmailEmailNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewActivePayload builds a email service active endpoint payload.
func NewActivePayload(code string) *email.ActivePayload {
	return &email.ActivePayload{
		Code: code,
	}
}

// NewSendEmailPayload builds a email service send_email endpoint payload.
func NewSendEmailPayload(body *SendEmailRequestBody) *email.SendEmailPayload {
	v := &email.SendEmailPayload{
		Email: *body.Email,
	}
	return v
}

// ValidateSendEmailRequestBody runs the validations defined on
// send_email_request_body
func ValidateSendEmailRequestBody(body *SendEmailRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", *body.Email, "\\S+@\\S+\\.\\S+"))
	}
	return
}
