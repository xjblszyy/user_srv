// Code generated by goa v3.0.2, DO NOT EDIT.
//
// email HTTP server encoders and decoders
//
// Command:
// $ goa gen user/design

package server

import (
	"context"
	"io"
	"net/http"
	email "user/gen/email"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeActiveResponse returns an encoder for responses returned by the email
// active endpoint.
func EncodeActiveResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeActiveRequest returns a decoder for requests sent to the email active
// endpoint.
func DecodeActiveRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			code string

			params = mux.Vars(r)
		)
		code = params["code"]
		payload := NewActivePayload(code)

		return payload, nil
	}
}

// EncodeActiveError returns an encoder for errors returned by the active email
// endpoint.
func EncodeActiveError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalide_code":
			res := v.(*email.EmailInvalide)
			enc := encoder(ctx, w)
			body := NewActiveInvalideCodeResponseBody(res)
			w.Header().Set("goa-error", "invalide_code")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeSendEmailResponse returns an encoder for responses returned by the
// email send_email endpoint.
func EncodeSendEmailResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSendEmailRequest returns a decoder for requests sent to the email
// send_email endpoint.
func DecodeSendEmailRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SendEmailRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSendEmailRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSendEmailPayload(&body)

		return payload, nil
	}
}

// EncodeSendEmailError returns an encoder for errors returned by the
// send_email email endpoint.
func EncodeSendEmailError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalide_email":
			res := v.(*email.EmailInvalide)
			enc := encoder(ctx, w)
			body := NewSendEmailInvalideEmailResponseBody(res)
			w.Header().Set("goa-error", "invalide_email")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "email_not_found":
			res := v.(*email.EmailNotFound)
			enc := encoder(ctx, w)
			body := NewSendEmailEmailNotFoundResponseBody(res)
			w.Header().Set("goa-error", "email_not_found")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
