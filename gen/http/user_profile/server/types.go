// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userProfile HTTP server types
//
// Command:
// $ goa gen user/design

package server

import (
	"unicode/utf8"
	userprofile "user/gen/user_profile"
	userprofileviews "user/gen/user_profile/views"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "userProfile" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// email of userProfile
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// password of userProfile
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// SigninRequestBody is the type of the "userProfile" service "signin" endpoint
// HTTP request body.
type SigninRequestBody struct {
	// Email used to perform signin
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password used to perform signin
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// UpdateRequestBody is the type of the "userProfile" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// avator of userProfile
	Avator *string `form:"avator,omitempty" json:"avator,omitempty" xml:"avator,omitempty"`
	// nickname of userProfile
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
}

// RetrieveResponseBody is the type of the "userProfile" service "retrieve"
// endpoint HTTP response body.
type RetrieveResponseBody struct {
	// ID is the unique id of the userProfile.
	ID string `form:"id" json:"id" xml:"id"`
	// email of userProfile
	Email    string  `form:"email" json:"email" xml:"email"`
	Avator   *string `form:"avator,omitempty" json:"avator,omitempty" xml:"avator,omitempty"`
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
}

// RetrieveNotFoundResponseBody is the type of the "userProfile" service
// "retrieve" endpoint HTTP response body for the "not_found" error.
type RetrieveNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing user
	ID string `form:"id" json:"id" xml:"id"`
}

// RetrieveInvalideTokenResponseBody is the type of the "userProfile" service
// "retrieve" endpoint HTTP response body for the "invalide_token" error.
type RetrieveInvalideTokenResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing user
	ID string `form:"id" json:"id" xml:"id"`
}

// CreateEmailExistResponseBody is the type of the "userProfile" service
// "create" endpoint HTTP response body for the "email_exist" error.
type CreateEmailExistResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing user
	ID string `form:"id" json:"id" xml:"id"`
}

// SigninEmailOrPasswordErrorResponseBody is the type of the "userProfile"
// service "signin" endpoint HTTP response body for the
// "email_or_password_error" error.
type SigninEmailOrPasswordErrorResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing user
	ID string `form:"id" json:"id" xml:"id"`
}

// UpdateInvalideTokenResponseBody is the type of the "userProfile" service
// "update" endpoint HTTP response body for the "invalide_token" error.
type UpdateInvalideTokenResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing user
	ID string `form:"id" json:"id" xml:"id"`
}

// NewRetrieveResponseBody builds the HTTP response body from the result of the
// "retrieve" endpoint of the "userProfile" service.
func NewRetrieveResponseBody(res *userprofileviews.UserProfileView) *RetrieveResponseBody {
	body := &RetrieveResponseBody{
		ID:       *res.ID,
		Email:    *res.Email,
		Avator:   res.Avator,
		Nickname: res.Nickname,
	}
	return body
}

// NewRetrieveNotFoundResponseBody builds the HTTP response body from the
// result of the "retrieve" endpoint of the "userProfile" service.
func NewRetrieveNotFoundResponseBody(res *userprofile.NotFound) *RetrieveNotFoundResponseBody {
	body := &RetrieveNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewRetrieveInvalideTokenResponseBody builds the HTTP response body from the
// result of the "retrieve" endpoint of the "userProfile" service.
func NewRetrieveInvalideTokenResponseBody(res *userprofile.TokenInvalide) *RetrieveInvalideTokenResponseBody {
	body := &RetrieveInvalideTokenResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewCreateEmailExistResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "userProfile" service.
func NewCreateEmailExistResponseBody(res *userprofile.EmailExist) *CreateEmailExistResponseBody {
	body := &CreateEmailExistResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewSigninEmailOrPasswordErrorResponseBody builds the HTTP response body from
// the result of the "signin" endpoint of the "userProfile" service.
func NewSigninEmailOrPasswordErrorResponseBody(res *userprofile.EmailOrPasswordError) *SigninEmailOrPasswordErrorResponseBody {
	body := &SigninEmailOrPasswordErrorResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewUpdateInvalideTokenResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "userProfile" service.
func NewUpdateInvalideTokenResponseBody(res *userprofile.TokenInvalide) *UpdateInvalideTokenResponseBody {
	body := &UpdateInvalideTokenResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewRetrievePayload builds a userProfile service retrieve endpoint payload.
func NewRetrievePayload(token string) *userprofile.RetrievePayload {
	return &userprofile.RetrievePayload{
		Token: token,
	}
}

// NewCreateAddUser builds a userProfile service create endpoint payload.
func NewCreateAddUser(body *CreateRequestBody) *userprofile.AddUser {
	v := &userprofile.AddUser{
		Email:    *body.Email,
		Password: *body.Password,
	}
	return v
}

// NewSigninPayload builds a userProfile service signin endpoint payload.
func NewSigninPayload(body *SigninRequestBody) *userprofile.SigninPayload {
	v := &userprofile.SigninPayload{
		Email:    *body.Email,
		Password: *body.Password,
	}
	return v
}

// NewUpdateUser builds a userProfile service update endpoint payload.
func NewUpdateUser(body *UpdateRequestBody, token string) *userprofile.UpdateUser {
	v := &userprofile.UpdateUser{
		Avator:   *body.Avator,
		Nickname: *body.Nickname,
	}
	v.Token = token
	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", *body.Email, "\\S+@\\S+\\.\\S+"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 6, true))
		}
	}
	return
}

// ValidateSigninRequestBody runs the validations defined on SigninRequestBody
func ValidateSigninRequestBody(body *SigninRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Avator == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("avator", "body"))
	}
	if body.Nickname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nickname", "body"))
	}
	return
}
