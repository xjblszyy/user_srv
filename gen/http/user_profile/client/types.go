// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userProfile HTTP client types
//
// Command:
// $ goa gen user/design

package client

import (
	userprofile "user/gen/user_profile"
	userprofileviews "user/gen/user_profile/views"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "userProfile" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// email of userProfile
	Email string `form:"email" json:"email" xml:"email"`
	// password of userProfile
	Password string `form:"password" json:"password" xml:"password"`
}

// SigninRequestBody is the type of the "userProfile" service "signin" endpoint
// HTTP request body.
type SigninRequestBody struct {
	// Email used to perform signin
	Email string `form:"email" json:"email" xml:"email"`
	// Password used to perform signin
	Password string `form:"password" json:"password" xml:"password"`
}

// UpdateRequestBody is the type of the "userProfile" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// avator of userProfile
	Avator string `form:"avator" json:"avator" xml:"avator"`
	// nickname of userProfile
	Nickname string `form:"nickname" json:"nickname" xml:"nickname"`
}

// RetrieveResponseBody is the type of the "userProfile" service "retrieve"
// endpoint HTTP response body.
type RetrieveResponseBody struct {
	// ID is the unique id of the userProfile.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// email of userProfile
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// password of userProfile
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	Avator   *string `form:"avator,omitempty" json:"avator,omitempty" xml:"avator,omitempty"`
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
}

// RetrieveNotFoundResponseBody is the type of the "userProfile" service
// "retrieve" endpoint HTTP response body for the "not_found" error.
type RetrieveNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// RetrieveInvalideTokenResponseBody is the type of the "userProfile" service
// "retrieve" endpoint HTTP response body for the "invalide_token" error.
type RetrieveInvalideTokenResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// CreateEmailExistResponseBody is the type of the "userProfile" service
// "create" endpoint HTTP response body for the "email_exist" error.
type CreateEmailExistResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// SigninEmailOrPasswordErrorResponseBody is the type of the "userProfile"
// service "signin" endpoint HTTP response body for the
// "email_or_password_error" error.
type SigninEmailOrPasswordErrorResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UpdateInvalideTokenResponseBody is the type of the "userProfile" service
// "update" endpoint HTTP response body for the "invalide_token" error.
type UpdateInvalideTokenResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "userProfile" service.
func NewCreateRequestBody(p *userprofile.AddUser) *CreateRequestBody {
	body := &CreateRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewSigninRequestBody builds the HTTP request body from the payload of the
// "signin" endpoint of the "userProfile" service.
func NewSigninRequestBody(p *userprofile.SigninPayload) *SigninRequestBody {
	body := &SigninRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "userProfile" service.
func NewUpdateRequestBody(p *userprofile.UpdateUser) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Avator:   p.Avator,
		Nickname: p.Nickname,
	}
	return body
}

// NewRetrieveUserProfileOK builds a "userProfile" service "retrieve" endpoint
// result from a HTTP "OK" response.
func NewRetrieveUserProfileOK(body *RetrieveResponseBody) *userprofileviews.UserProfileView {
	v := &userprofileviews.UserProfileView{
		ID:       body.ID,
		Email:    body.Email,
		Password: body.Password,
		Avator:   body.Avator,
		Nickname: body.Nickname,
	}
	return v
}

// NewRetrieveNotFound builds a userProfile service retrieve endpoint not_found
// error.
func NewRetrieveNotFound(body *RetrieveNotFoundResponseBody) *userprofile.NotFound {
	v := &userprofile.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// NewRetrieveInvalideToken builds a userProfile service retrieve endpoint
// invalide_token error.
func NewRetrieveInvalideToken(body *RetrieveInvalideTokenResponseBody) *userprofile.TokenInvalide {
	v := &userprofile.TokenInvalide{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// NewCreateEmailExist builds a userProfile service create endpoint email_exist
// error.
func NewCreateEmailExist(body *CreateEmailExistResponseBody) *userprofile.EmailExist {
	v := &userprofile.EmailExist{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// NewSigninEmailOrPasswordError builds a userProfile service signin endpoint
// email_or_password_error error.
func NewSigninEmailOrPasswordError(body *SigninEmailOrPasswordErrorResponseBody) *userprofile.EmailOrPasswordError {
	v := &userprofile.EmailOrPasswordError{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// NewUpdateInvalideToken builds a userProfile service update endpoint
// invalide_token error.
func NewUpdateInvalideToken(body *UpdateInvalideTokenResponseBody) *userprofile.TokenInvalide {
	v := &userprofile.TokenInvalide{
		Message: *body.Message,
		ID:      *body.ID,
	}
	return v
}

// ValidateRetrieveNotFoundResponseBody runs the validations defined on
// retrieve_not_found_response_body
func ValidateRetrieveNotFoundResponseBody(body *RetrieveNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateRetrieveInvalideTokenResponseBody runs the validations defined on
// retrieve_invalide_token_response_body
func ValidateRetrieveInvalideTokenResponseBody(body *RetrieveInvalideTokenResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateCreateEmailExistResponseBody runs the validations defined on
// create_email_exist_response_body
func ValidateCreateEmailExistResponseBody(body *CreateEmailExistResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateSigninEmailOrPasswordErrorResponseBody runs the validations defined
// on signin_email_or_password_error_response_body
func ValidateSigninEmailOrPasswordErrorResponseBody(body *SigninEmailOrPasswordErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateUpdateInvalideTokenResponseBody runs the validations defined on
// update_invalide_token_response_body
func ValidateUpdateInvalideTokenResponseBody(body *UpdateInvalideTokenResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}
