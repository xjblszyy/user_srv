// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userProfile HTTP client encoders and decoders
//
// Command:
// $ goa gen user/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	userprofile "user/gen/user_profile"
	userprofileviews "user/gen/user_profile/views"

	goahttp "goa.design/goa/v3/http"
)

// BuildRetrieveRequest instantiates a HTTP request object with method and path
// set to call the "userProfile" service "retrieve" endpoint
func (c *Client) BuildRetrieveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RetrieveUserProfilePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("userProfile", "retrieve", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRetrieveRequest returns an encoder for requests sent to the
// userProfile retrieve server.
func EncodeRetrieveRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*userprofile.RetrievePayload)
		if !ok {
			return goahttp.ErrInvalidType("userProfile", "retrieve", "*userprofile.RetrievePayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		return nil
	}
}

// DecodeRetrieveResponse returns a decoder for responses returned by the
// userProfile retrieve endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRetrieveResponse may return the following errors:
//	- "not_found" (type *userprofile.NotFound): http.StatusNotFound
//	- "invalide_token" (type *userprofile.TokenInvalide): http.StatusBadRequest
//	- error: internal error
func DecodeRetrieveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RetrieveResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("userProfile", "retrieve", err)
			}
			p := NewRetrieveUserProfileOK(&body)
			view := "default"
			vres := &userprofileviews.UserProfile{p, view}
			if err = userprofileviews.ValidateUserProfile(vres); err != nil {
				return nil, goahttp.ErrValidationError("userProfile", "retrieve", err)
			}
			res := userprofile.NewUserProfile(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body RetrieveNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("userProfile", "retrieve", err)
			}
			err = ValidateRetrieveNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("userProfile", "retrieve", err)
			}
			return nil, NewRetrieveNotFound(&body)
		case http.StatusBadRequest:
			var (
				body RetrieveInvalideTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("userProfile", "retrieve", err)
			}
			err = ValidateRetrieveInvalideTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("userProfile", "retrieve", err)
			}
			return nil, NewRetrieveInvalideToken(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("userProfile", "retrieve", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "userProfile" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUserProfilePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("userProfile", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the userProfile
// create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*userprofile.AddUser)
		if !ok {
			return goahttp.ErrInvalidType("userProfile", "create", "*userprofile.AddUser", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("userProfile", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the
// userProfile create endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateResponse may return the following errors:
//	- "email_exist" (type *userprofile.EmailExist): http.StatusBadRequest
//	- error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("userProfile", "create", err)
			}
			return body, nil
		case http.StatusBadRequest:
			var (
				body CreateEmailExistResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("userProfile", "create", err)
			}
			err = ValidateCreateEmailExistResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("userProfile", "create", err)
			}
			return nil, NewCreateEmailExist(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("userProfile", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildSigninRequest instantiates a HTTP request object with method and path
// set to call the "userProfile" service "signin" endpoint
func (c *Client) BuildSigninRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SigninUserProfilePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("userProfile", "signin", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSigninRequest returns an encoder for requests sent to the userProfile
// signin server.
func EncodeSigninRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*userprofile.SigninPayload)
		if !ok {
			return goahttp.ErrInvalidType("userProfile", "signin", "*userprofile.SigninPayload", v)
		}
		body := NewSigninRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("userProfile", "signin", err)
		}
		return nil
	}
}

// DecodeSigninResponse returns a decoder for responses returned by the
// userProfile signin endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSigninResponse may return the following errors:
//	- "email_or_password_error" (type *userprofile.EmailOrPasswordError): http.StatusBadRequest
//	- error: internal error
func DecodeSigninResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("userProfile", "signin", err)
			}
			return body, nil
		case http.StatusBadRequest:
			var (
				body SigninEmailOrPasswordErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("userProfile", "signin", err)
			}
			err = ValidateSigninEmailOrPasswordErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("userProfile", "signin", err)
			}
			return nil, NewSigninEmailOrPasswordError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("userProfile", "signin", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "userProfile" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateUserProfilePath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("userProfile", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the userProfile
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*userprofile.UpdateUser)
		if !ok {
			return goahttp.ErrInvalidType("userProfile", "update", "*userprofile.UpdateUser", v)
		}
		req.Header.Set("Authorization", p.Token)
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("userProfile", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// userProfile update endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "invalide_token" (type *userprofile.TokenInvalide): http.StatusBadRequest
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UpdateInvalideTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("userProfile", "update", err)
			}
			err = ValidateUpdateInvalideTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("userProfile", "update", err)
			}
			return nil, NewUpdateInvalideToken(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("userProfile", "update", resp.StatusCode, string(body))
		}
	}
}
