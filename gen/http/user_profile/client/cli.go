// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userProfile HTTP client CLI support package
//
// Command:
// $ goa gen user/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"
	userprofile "user/gen/user_profile"

	goa "goa.design/goa/v3/pkg"
)

// BuildRetrievePayload builds the payload for the userProfile retrieve
// endpoint from CLI flags.
func BuildRetrievePayload(userProfileRetrieveToken string) (*userprofile.RetrievePayload, error) {
	var token string
	{
		token = userProfileRetrieveToken
	}
	payload := &userprofile.RetrievePayload{
		Token: token,
	}
	return payload, nil
}

// BuildCreatePayload builds the payload for the userProfile create endpoint
// from CLI flags.
func BuildCreatePayload(userProfileCreateBody string) (*userprofile.AddUser, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(userProfileCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"123@456.com\",\n      \"password\": \"123456\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", body.Email, "\\S+@\\S+\\.\\S+"))
		if utf8.RuneCountInString(body.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 6, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &userprofile.AddUser{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildSigninPayload builds the payload for the userProfile signin endpoint
// from CLI flags.
func BuildSigninPayload(userProfileSigninBody string) (*userprofile.SigninPayload, error) {
	var err error
	var body SigninRequestBody
	{
		err = json.Unmarshal([]byte(userProfileSigninBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"1@1.com\",\n      \"password\": \"123456\"\n   }'")
		}
	}
	v := &userprofile.SigninPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildUpdatePayload builds the payload for the userProfile update endpoint
// from CLI flags.
func BuildUpdatePayload(userProfileUpdateBody string, userProfileUpdateToken string) (*userprofile.UpdateUser, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(userProfileUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"avator\": \"https://www.baidu.com/img/bd_logo1.png?where=super\",\n      \"nickname\": \"Bobby\"\n   }'")
		}
	}
	var token string
	{
		token = userProfileUpdateToken
	}
	v := &userprofile.UpdateUser{
		Avator:   body.Avator,
		Nickname: body.Nickname,
	}
	v.Token = token
	return v, nil
}
