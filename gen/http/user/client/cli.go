// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen user-srv/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"
	user "user-srv/gen/user"

	goa "goa.design/goa/v3/pkg"
)

// BuildRetrievePayload builds the payload for the user retrieve endpoint from
// CLI flags.
func BuildRetrievePayload(userRetrieveToken string) (*user.RetrievePayload, error) {
	var token string
	{
		token = userRetrieveToken
	}
	payload := &user.RetrievePayload{
		Token: token,
	}
	return payload, nil
}

// BuildCreatePayload builds the payload for the user create endpoint from CLI
// flags.
func BuildCreatePayload(userCreateBody string) (*user.AddUser, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(userCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"123@456.com\",\n      \"password\": \"123456\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", body.Email, "\\S+@\\S+\\.\\S+"))
		if utf8.RuneCountInString(body.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 6, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &user.AddUser{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildSigninPayload builds the payload for the user signin endpoint from CLI
// flags.
func BuildSigninPayload(userSigninBody string) (*user.Signin, error) {
	var err error
	var body SigninRequestBody
	{
		err = json.Unmarshal([]byte(userSigninBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"1@1.com\",\n      \"password\": \"123456\"\n   }'")
		}
	}
	v := &user.Signin{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildUpdatePayload builds the payload for the user update endpoint from CLI
// flags.
func BuildUpdatePayload(userUpdateBody string, userUpdateToken string) (*user.UpdateUser, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(userUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"avatar\": \"https://www.baidu.com/img/bd_logo1.png?where=super\",\n      \"nickname\": \"Bobby\"\n   }'")
		}
	}
	var token string
	{
		token = userUpdateToken
	}
	v := &user.UpdateUser{
		Avatar:   body.Avatar,
		Nickname: body.Nickname,
	}
	v.Token = token
	return v, nil
}

// BuildSendEmailPayload builds the payload for the user sendEmail endpoint
// from CLI flags.
func BuildSendEmailPayload(userSendEmailBody string) (*user.SendEmail, error) {
	var err error
	var body SendEmailRequestBody
	{
		err = json.Unmarshal([]byte(userSendEmailBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"123@456.com\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", body.Email, "\\S+@\\S+\\.\\S+"))
		if err != nil {
			return nil, err
		}
	}
	v := &user.SendEmail{
		Email: body.Email,
	}
	return v, nil
}

// BuildActiveEmailPayload builds the payload for the user activeEmail endpoint
// from CLI flags.
func BuildActiveEmailPayload(userActiveEmailCode string) (*user.EmailCode, error) {
	var code string
	{
		code = userActiveEmailCode
	}
	payload := &user.EmailCode{
		Code: code,
	}
	return payload, nil
}
