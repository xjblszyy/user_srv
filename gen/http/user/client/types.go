// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen user-srv/design

package client

import (
	user "user-srv/gen/user"
	userviews "user-srv/gen/user/views"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "user" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// email of userProfile
	Email string `form:"email" json:"email" xml:"email"`
	// password of userProfile
	Password string `form:"password" json:"password" xml:"password"`
}

// SigninRequestBody is the type of the "user" service "signin" endpoint HTTP
// request body.
type SigninRequestBody struct {
	// Email used to perform signin
	Email string `form:"email" json:"email" xml:"email"`
	// Password used to perform signin
	Password string `form:"password" json:"password" xml:"password"`
}

// UpdateRequestBody is the type of the "user" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// avatar of user
	Avatar string `form:"avatar" json:"avatar" xml:"avatar"`
	// nickname of user
	Nickname string `form:"nickname" json:"nickname" xml:"nickname"`
}

// SendEmailRequestBody is the type of the "user" service "sendEmail" endpoint
// HTTP request body.
type SendEmailRequestBody struct {
	// email of userProfile
	Email string `form:"email" json:"email" xml:"email"`
}

// RetrieveResponseBody is the type of the "user" service "retrieve" endpoint
// HTTP response body.
type RetrieveResponseBody struct {
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	Data    *string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// CreateResponseBody is the type of the "user" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	Data    *string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// SigninResponseBody is the type of the "user" service "signin" endpoint HTTP
// response body.
type SigninResponseBody struct {
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	Data    *string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// SendEmailResponseBody is the type of the "user" service "sendEmail" endpoint
// HTTP response body.
type SendEmailResponseBody struct {
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	Data    *string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ActiveEmailResponseBody is the type of the "user" service "activeEmail"
// endpoint HTTP response body.
type ActiveEmailResponseBody struct {
	// code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	Data    *string `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// RetrieveInvalideTokenResponseBody is the type of the "user" service
// "retrieve" endpoint HTTP response body for the "invalide_token" error.
type RetrieveInvalideTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RetrieveNotFoundResponseBody is the type of the "user" service "retrieve"
// endpoint HTTP response body for the "not_found" error.
type RetrieveNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateEmailExistResponseBody is the type of the "user" service "create"
// endpoint HTTP response body for the "email_exist" error.
type CreateEmailExistResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SigninEmailOrPasswordErrorResponseBody is the type of the "user" service
// "signin" endpoint HTTP response body for the "email_or_password_error" error.
type SigninEmailOrPasswordErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateInvalideTokenResponseBody is the type of the "user" service "update"
// endpoint HTTP response body for the "invalide_token" error.
type UpdateInvalideTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "user" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SendEmailEmailNotFoundResponseBody is the type of the "user" service
// "sendEmail" endpoint HTTP response body for the "email_not_found" error.
type SendEmailEmailNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ActiveEmailCodeInvalideResponseBody is the type of the "user" service
// "activeEmail" endpoint HTTP response body for the "code_invalide" error.
type ActiveEmailCodeInvalideResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "user" service.
func NewCreateRequestBody(p *user.AddUser) *CreateRequestBody {
	body := &CreateRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewSigninRequestBody builds the HTTP request body from the payload of the
// "signin" endpoint of the "user" service.
func NewSigninRequestBody(p *user.Signin) *SigninRequestBody {
	body := &SigninRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "user" service.
func NewUpdateRequestBody(p *user.UpdateUser) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Avatar:   p.Avatar,
		Nickname: p.Nickname,
	}
	return body
}

// NewSendEmailRequestBody builds the HTTP request body from the payload of the
// "sendEmail" endpoint of the "user" service.
func NewSendEmailRequestBody(p *user.SendEmail) *SendEmailRequestBody {
	body := &SendEmailRequestBody{
		Email: p.Email,
	}
	return body
}

// NewRetrieveResponseDataOK builds a "user" service "retrieve" endpoint result
// from a HTTP "OK" response.
func NewRetrieveResponseDataOK(body *RetrieveResponseBody) *userviews.ResponseDataView {
	v := &userviews.ResponseDataView{
		Code:    body.Code,
		Message: body.Message,
		Data:    body.Data,
	}
	return v
}

// NewRetrieveInvalideToken builds a user service retrieve endpoint
// invalide_token error.
func NewRetrieveInvalideToken(body *RetrieveInvalideTokenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewRetrieveNotFound builds a user service retrieve endpoint not_found error.
func NewRetrieveNotFound(body *RetrieveNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewCreateResponseDataCreated builds a "user" service "create" endpoint
// result from a HTTP "Created" response.
func NewCreateResponseDataCreated(body *CreateResponseBody) *userviews.ResponseDataView {
	v := &userviews.ResponseDataView{
		Code:    body.Code,
		Message: body.Message,
		Data:    body.Data,
	}
	return v
}

// NewCreateEmailExist builds a user service create endpoint email_exist error.
func NewCreateEmailExist(body *CreateEmailExistResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewSigninResponseDataOK builds a "user" service "signin" endpoint result
// from a HTTP "OK" response.
func NewSigninResponseDataOK(body *SigninResponseBody) *userviews.ResponseDataView {
	v := &userviews.ResponseDataView{
		Code:    body.Code,
		Message: body.Message,
		Data:    body.Data,
	}
	return v
}

// NewSigninEmailOrPasswordError builds a user service signin endpoint
// email_or_password_error error.
func NewSigninEmailOrPasswordError(body *SigninEmailOrPasswordErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewUpdateInvalideToken builds a user service update endpoint invalide_token
// error.
func NewUpdateInvalideToken(body *UpdateInvalideTokenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewUpdateNotFound builds a user service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewSendEmailResponseDataOK builds a "user" service "sendEmail" endpoint
// result from a HTTP "OK" response.
func NewSendEmailResponseDataOK(body *SendEmailResponseBody) *userviews.ResponseDataView {
	v := &userviews.ResponseDataView{
		Code:    body.Code,
		Message: body.Message,
		Data:    body.Data,
	}
	return v
}

// NewSendEmailEmailNotFound builds a user service sendEmail endpoint
// email_not_found error.
func NewSendEmailEmailNotFound(body *SendEmailEmailNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewActiveEmailResponseDataOK builds a "user" service "activeEmail" endpoint
// result from a HTTP "OK" response.
func NewActiveEmailResponseDataOK(body *ActiveEmailResponseBody) *userviews.ResponseDataView {
	v := &userviews.ResponseDataView{
		Code:    body.Code,
		Message: body.Message,
		Data:    body.Data,
	}
	return v
}

// NewActiveEmailCodeInvalide builds a user service activeEmail endpoint
// code_invalide error.
func NewActiveEmailCodeInvalide(body *ActiveEmailCodeInvalideResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// ValidateRetrieveInvalideTokenResponseBody runs the validations defined on
// retrieve_invalide_token_response_body
func ValidateRetrieveInvalideTokenResponseBody(body *RetrieveInvalideTokenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRetrieveNotFoundResponseBody runs the validations defined on
// retrieve_not_found_response_body
func ValidateRetrieveNotFoundResponseBody(body *RetrieveNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateEmailExistResponseBody runs the validations defined on
// create_email_exist_response_body
func ValidateCreateEmailExistResponseBody(body *CreateEmailExistResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSigninEmailOrPasswordErrorResponseBody runs the validations defined
// on signin_email_or_password_error_response_body
func ValidateSigninEmailOrPasswordErrorResponseBody(body *SigninEmailOrPasswordErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateInvalideTokenResponseBody runs the validations defined on
// update_invalide_token_response_body
func ValidateUpdateInvalideTokenResponseBody(body *UpdateInvalideTokenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSendEmailEmailNotFoundResponseBody runs the validations defined on
// sendEmail_email_not_found_response_body
func ValidateSendEmailEmailNotFoundResponseBody(body *SendEmailEmailNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateActiveEmailCodeInvalideResponseBody runs the validations defined on
// activeEmail_code_invalide_response_body
func ValidateActiveEmailCodeInvalideResponseBody(body *ActiveEmailCodeInvalideResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
