// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user HTTP server types
//
// Command:
// $ goa gen user-srv/design

package server

import (
	"unicode/utf8"
	user "user-srv/gen/user"
	userviews "user-srv/gen/user/views"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "user" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// email of userProfile
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// password of userProfile
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// SigninRequestBody is the type of the "user" service "signin" endpoint HTTP
// request body.
type SigninRequestBody struct {
	// Email used to perform signin
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password used to perform signin
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// UpdateRequestBody is the type of the "user" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// avatar of user
	Avatar *string `form:"avatar,omitempty" json:"avatar,omitempty" xml:"avatar,omitempty"`
	// nickname of user
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
}

// SendEmailRequestBody is the type of the "user" service "sendEmail" endpoint
// HTTP request body.
type SendEmailRequestBody struct {
	// email of userProfile
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// RetrieveResponseBody is the type of the "user" service "retrieve" endpoint
// HTTP response body.
type RetrieveResponseBody struct {
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
	Data    string `form:"data" json:"data" xml:"data"`
}

// CreateResponseBody is the type of the "user" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
	Data    string `form:"data" json:"data" xml:"data"`
}

// SigninResponseBody is the type of the "user" service "signin" endpoint HTTP
// response body.
type SigninResponseBody struct {
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
	Data    string `form:"data" json:"data" xml:"data"`
}

// SendEmailResponseBody is the type of the "user" service "sendEmail" endpoint
// HTTP response body.
type SendEmailResponseBody struct {
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
	Data    string `form:"data" json:"data" xml:"data"`
}

// ActiveEmailResponseBody is the type of the "user" service "activeEmail"
// endpoint HTTP response body.
type ActiveEmailResponseBody struct {
	// code
	Code int `form:"code" json:"code" xml:"code"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
	Data    string `form:"data" json:"data" xml:"data"`
}

// RetrieveInvalideTokenResponseBody is the type of the "user" service
// "retrieve" endpoint HTTP response body for the "invalide_token" error.
type RetrieveInvalideTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RetrieveNotFoundResponseBody is the type of the "user" service "retrieve"
// endpoint HTTP response body for the "not_found" error.
type RetrieveNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateEmailExistResponseBody is the type of the "user" service "create"
// endpoint HTTP response body for the "email_exist" error.
type CreateEmailExistResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SigninEmailOrPasswordErrorResponseBody is the type of the "user" service
// "signin" endpoint HTTP response body for the "email_or_password_error" error.
type SigninEmailOrPasswordErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInvalideTokenResponseBody is the type of the "user" service "update"
// endpoint HTTP response body for the "invalide_token" error.
type UpdateInvalideTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "user" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SendEmailEmailNotFoundResponseBody is the type of the "user" service
// "sendEmail" endpoint HTTP response body for the "email_not_found" error.
type SendEmailEmailNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ActiveEmailCodeInvalideResponseBody is the type of the "user" service
// "activeEmail" endpoint HTTP response body for the "code_invalide" error.
type ActiveEmailCodeInvalideResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewRetrieveResponseBody builds the HTTP response body from the result of the
// "retrieve" endpoint of the "user" service.
func NewRetrieveResponseBody(res *userviews.ResponseDataView) *RetrieveResponseBody {
	body := &RetrieveResponseBody{
		Code:    *res.Code,
		Message: *res.Message,
		Data:    *res.Data,
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "user" service.
func NewCreateResponseBody(res *userviews.ResponseDataView) *CreateResponseBody {
	body := &CreateResponseBody{
		Code:    *res.Code,
		Message: *res.Message,
		Data:    *res.Data,
	}
	return body
}

// NewSigninResponseBody builds the HTTP response body from the result of the
// "signin" endpoint of the "user" service.
func NewSigninResponseBody(res *userviews.ResponseDataView) *SigninResponseBody {
	body := &SigninResponseBody{
		Code:    *res.Code,
		Message: *res.Message,
		Data:    *res.Data,
	}
	return body
}

// NewSendEmailResponseBody builds the HTTP response body from the result of
// the "sendEmail" endpoint of the "user" service.
func NewSendEmailResponseBody(res *userviews.ResponseDataView) *SendEmailResponseBody {
	body := &SendEmailResponseBody{
		Code:    *res.Code,
		Message: *res.Message,
		Data:    *res.Data,
	}
	return body
}

// NewActiveEmailResponseBody builds the HTTP response body from the result of
// the "activeEmail" endpoint of the "user" service.
func NewActiveEmailResponseBody(res *userviews.ResponseDataView) *ActiveEmailResponseBody {
	body := &ActiveEmailResponseBody{
		Code:    *res.Code,
		Message: *res.Message,
		Data:    *res.Data,
	}
	return body
}

// NewRetrieveInvalideTokenResponseBody builds the HTTP response body from the
// result of the "retrieve" endpoint of the "user" service.
func NewRetrieveInvalideTokenResponseBody(res *goa.ServiceError) *RetrieveInvalideTokenResponseBody {
	body := &RetrieveInvalideTokenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRetrieveNotFoundResponseBody builds the HTTP response body from the
// result of the "retrieve" endpoint of the "user" service.
func NewRetrieveNotFoundResponseBody(res *goa.ServiceError) *RetrieveNotFoundResponseBody {
	body := &RetrieveNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateEmailExistResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "user" service.
func NewCreateEmailExistResponseBody(res *goa.ServiceError) *CreateEmailExistResponseBody {
	body := &CreateEmailExistResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSigninEmailOrPasswordErrorResponseBody builds the HTTP response body from
// the result of the "signin" endpoint of the "user" service.
func NewSigninEmailOrPasswordErrorResponseBody(res *goa.ServiceError) *SigninEmailOrPasswordErrorResponseBody {
	body := &SigninEmailOrPasswordErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInvalideTokenResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "user" service.
func NewUpdateInvalideTokenResponseBody(res *goa.ServiceError) *UpdateInvalideTokenResponseBody {
	body := &UpdateInvalideTokenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "user" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendEmailEmailNotFoundResponseBody builds the HTTP response body from the
// result of the "sendEmail" endpoint of the "user" service.
func NewSendEmailEmailNotFoundResponseBody(res *goa.ServiceError) *SendEmailEmailNotFoundResponseBody {
	body := &SendEmailEmailNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewActiveEmailCodeInvalideResponseBody builds the HTTP response body from
// the result of the "activeEmail" endpoint of the "user" service.
func NewActiveEmailCodeInvalideResponseBody(res *goa.ServiceError) *ActiveEmailCodeInvalideResponseBody {
	body := &ActiveEmailCodeInvalideResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRetrievePayload builds a user service retrieve endpoint payload.
func NewRetrievePayload(token string) *user.RetrievePayload {
	return &user.RetrievePayload{
		Token: token,
	}
}

// NewCreateAddUser builds a user service create endpoint payload.
func NewCreateAddUser(body *CreateRequestBody) *user.AddUser {
	v := &user.AddUser{
		Email:    *body.Email,
		Password: *body.Password,
	}
	return v
}

// NewSignin builds a user service signin endpoint payload.
func NewSignin(body *SigninRequestBody) *user.Signin {
	v := &user.Signin{
		Email:    *body.Email,
		Password: *body.Password,
	}
	return v
}

// NewUpdateUser builds a user service update endpoint payload.
func NewUpdateUser(body *UpdateRequestBody, token string) *user.UpdateUser {
	v := &user.UpdateUser{
		Avatar:   *body.Avatar,
		Nickname: *body.Nickname,
	}
	v.Token = token
	return v
}

// NewSendEmail builds a user service sendEmail endpoint payload.
func NewSendEmail(body *SendEmailRequestBody) *user.SendEmail {
	v := &user.SendEmail{
		Email: *body.Email,
	}
	return v
}

// NewActiveEmailEmailCode builds a user service activeEmail endpoint payload.
func NewActiveEmailEmailCode(code string) *user.EmailCode {
	return &user.EmailCode{
		Code: code,
	}
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", *body.Email, "\\S+@\\S+\\.\\S+"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 6, true))
		}
	}
	return
}

// ValidateSigninRequestBody runs the validations defined on SigninRequestBody
func ValidateSigninRequestBody(body *SigninRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Avatar == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("avatar", "body"))
	}
	if body.Nickname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nickname", "body"))
	}
	return
}

// ValidateSendEmailRequestBody runs the validations defined on
// SendEmailRequestBody
func ValidateSendEmailRequestBody(body *SendEmailRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", *body.Email, "\\S+@\\S+\\.\\S+"))
	}
	return
}
