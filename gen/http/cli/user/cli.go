// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen user/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	emailc "user/gen/http/email/client"
	filec "user/gen/http/file/client"
	userprofilec "user/gen/http/user_profile/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `email (active|send-email)
file upload
user-profile (retrieve|create|signin|update)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` email active --code "Officiis velit quaerat nam velit incidunt."` + "\n" +
		os.Args[0] + ` file upload --body '{
      "file": "Eaque quia cupiditate cumque quibusdam accusantium et."
   }'` + "\n" +
		os.Args[0] + ` user-profile retrieve --token "Earum aut maiores harum impedit enim."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	fileUploadEncoderFn filec.FileUploadEncoderFunc,
) (goa.Endpoint, interface{}, error) {
	var (
		emailFlags = flag.NewFlagSet("email", flag.ContinueOnError)

		emailActiveFlags    = flag.NewFlagSet("active", flag.ExitOnError)
		emailActiveCodeFlag = emailActiveFlags.String("code", "REQUIRED", "operand")

		emailSendEmailFlags    = flag.NewFlagSet("send-email", flag.ExitOnError)
		emailSendEmailBodyFlag = emailSendEmailFlags.String("body", "REQUIRED", "")

		fileFlags = flag.NewFlagSet("file", flag.ContinueOnError)

		fileUploadFlags    = flag.NewFlagSet("upload", flag.ExitOnError)
		fileUploadBodyFlag = fileUploadFlags.String("body", "REQUIRED", "")

		userProfileFlags = flag.NewFlagSet("user-profile", flag.ContinueOnError)

		userProfileRetrieveFlags     = flag.NewFlagSet("retrieve", flag.ExitOnError)
		userProfileRetrieveTokenFlag = userProfileRetrieveFlags.String("token", "REQUIRED", "")

		userProfileCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		userProfileCreateBodyFlag = userProfileCreateFlags.String("body", "REQUIRED", "")

		userProfileSigninFlags    = flag.NewFlagSet("signin", flag.ExitOnError)
		userProfileSigninBodyFlag = userProfileSigninFlags.String("body", "REQUIRED", "")

		userProfileUpdateFlags     = flag.NewFlagSet("update", flag.ExitOnError)
		userProfileUpdateBodyFlag  = userProfileUpdateFlags.String("body", "REQUIRED", "")
		userProfileUpdateTokenFlag = userProfileUpdateFlags.String("token", "REQUIRED", "")
	)
	emailFlags.Usage = emailUsage
	emailActiveFlags.Usage = emailActiveUsage
	emailSendEmailFlags.Usage = emailSendEmailUsage

	fileFlags.Usage = fileUsage
	fileUploadFlags.Usage = fileUploadUsage

	userProfileFlags.Usage = userProfileUsage
	userProfileRetrieveFlags.Usage = userProfileRetrieveUsage
	userProfileCreateFlags.Usage = userProfileCreateUsage
	userProfileSigninFlags.Usage = userProfileSigninUsage
	userProfileUpdateFlags.Usage = userProfileUpdateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "email":
			svcf = emailFlags
		case "file":
			svcf = fileFlags
		case "user-profile":
			svcf = userProfileFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "email":
			switch epn {
			case "active":
				epf = emailActiveFlags

			case "send-email":
				epf = emailSendEmailFlags

			}

		case "file":
			switch epn {
			case "upload":
				epf = fileUploadFlags

			}

		case "user-profile":
			switch epn {
			case "retrieve":
				epf = userProfileRetrieveFlags

			case "create":
				epf = userProfileCreateFlags

			case "signin":
				epf = userProfileSigninFlags

			case "update":
				epf = userProfileUpdateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "email":
			c := emailc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "active":
				endpoint = c.Active()
				data, err = emailc.BuildActivePayload(*emailActiveCodeFlag)
			case "send-email":
				endpoint = c.SendEmail()
				data, err = emailc.BuildSendEmailPayload(*emailSendEmailBodyFlag)
			}
		case "file":
			c := filec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upload":
				endpoint = c.Upload(fileUploadEncoderFn)
				data, err = filec.BuildUploadPayload(*fileUploadBodyFlag)
			}
		case "user-profile":
			c := userprofilec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "retrieve":
				endpoint = c.Retrieve()
				data, err = userprofilec.BuildRetrievePayload(*userProfileRetrieveTokenFlag)
			case "create":
				endpoint = c.Create()
				data, err = userprofilec.BuildCreatePayload(*userProfileCreateBodyFlag)
			case "signin":
				endpoint = c.Signin()
				data, err = userprofilec.BuildSigninPayload(*userProfileSigninBodyFlag)
			case "update":
				endpoint = c.Update()
				data, err = userprofilec.BuildUpdatePayload(*userProfileUpdateBodyFlag, *userProfileUpdateTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// emailUsage displays the usage of the email command and its subcommands.
func emailUsage() {
	fmt.Fprintf(os.Stderr, `The email service makes it possible to active user and send active email.
Usage:
    %s [globalflags] email COMMAND [flags]

COMMAND:
    active: Active user by email code
    send-email: Send email to active user

Additional help:
    %s email COMMAND --help
`, os.Args[0], os.Args[0])
}
func emailActiveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] email active -code STRING

Active user by email code
    -code STRING: operand

Example:
    `+os.Args[0]+` email active --code "Officiis velit quaerat nam velit incidunt."
`, os.Args[0])
}

func emailSendEmailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] email send-email -body JSON

Send email to active user
    -body JSON: 

Example:
    `+os.Args[0]+` email send-email --body '{
      "email": "123@456.com"
   }'
`, os.Args[0])
}

// fileUsage displays the usage of the file command and its subcommands.
func fileUsage() {
	fmt.Fprintf(os.Stderr, `The file service makes it possible to upload static file.
Usage:
    %s [globalflags] file COMMAND [flags]

COMMAND:
    upload: Upload static file

Additional help:
    %s file COMMAND --help
`, os.Args[0], os.Args[0])
}
func fileUploadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] file upload -body JSON

Upload static file
    -body JSON: 

Example:
    `+os.Args[0]+` file upload --body '{
      "file": "Eaque quia cupiditate cumque quibusdam accusantium et."
   }'
`, os.Args[0])
}

// user-profileUsage displays the usage of the user-profile command and its
// subcommands.
func userProfileUsage() {
	fmt.Fprintf(os.Stderr, `The userProfile service makes it possible to view, add or remove user info.
Usage:
    %s [globalflags] user-profile COMMAND [flags]

COMMAND:
    retrieve: Show userProfile by Token
    create: Add new user and return its ID.
    signin: Creates a valid JWT
    update: Update avatar and nickname about user

Additional help:
    %s user-profile COMMAND --help
`, os.Args[0], os.Args[0])
}
func userProfileRetrieveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-profile retrieve -token STRING

Show userProfile by Token
    -token STRING: 

Example:
    `+os.Args[0]+` user-profile retrieve --token "Earum aut maiores harum impedit enim."
`, os.Args[0])
}

func userProfileCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-profile create -body JSON

Add new user and return its ID.
    -body JSON: 

Example:
    `+os.Args[0]+` user-profile create --body '{
      "email": "123@456.com",
      "password": "123456"
   }'
`, os.Args[0])
}

func userProfileSigninUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-profile signin -body JSON

Creates a valid JWT
    -body JSON: 

Example:
    `+os.Args[0]+` user-profile signin --body '{
      "email": "1@1.com",
      "password": "123456"
   }'
`, os.Args[0])
}

func userProfileUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user-profile update -body JSON -token STRING

Update avatar and nickname about user
    -body JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` user-profile update --body '{
      "avator": "https://www.baidu.com/img/bd_logo1.png?where=super",
      "nickname": "Bobby"
   }' --token "Qui consequatur."
`, os.Args[0])
}
