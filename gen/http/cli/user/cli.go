// Code generated by goa v3.0.2, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen user-srv/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	filec "user-srv/gen/http/file/client"
	userc "user-srv/gen/http/user/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `file upload
user (retrieve|create|signin|update|send-email|active-email)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` file upload --body '{
      "file": "Et expedita earum delectus."
   }'` + "\n" +
		os.Args[0] + ` user retrieve --token "Ex sed."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	fileUploadEncoderFn filec.FileUploadEncoderFunc,
) (goa.Endpoint, interface{}, error) {
	var (
		fileFlags = flag.NewFlagSet("file", flag.ContinueOnError)

		fileUploadFlags    = flag.NewFlagSet("upload", flag.ExitOnError)
		fileUploadBodyFlag = fileUploadFlags.String("body", "REQUIRED", "")

		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userRetrieveFlags     = flag.NewFlagSet("retrieve", flag.ExitOnError)
		userRetrieveTokenFlag = userRetrieveFlags.String("token", "REQUIRED", "")

		userCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		userCreateBodyFlag = userCreateFlags.String("body", "REQUIRED", "")

		userSigninFlags    = flag.NewFlagSet("signin", flag.ExitOnError)
		userSigninBodyFlag = userSigninFlags.String("body", "REQUIRED", "")

		userUpdateFlags     = flag.NewFlagSet("update", flag.ExitOnError)
		userUpdateBodyFlag  = userUpdateFlags.String("body", "REQUIRED", "")
		userUpdateTokenFlag = userUpdateFlags.String("token", "REQUIRED", "")

		userSendEmailFlags    = flag.NewFlagSet("send-email", flag.ExitOnError)
		userSendEmailBodyFlag = userSendEmailFlags.String("body", "REQUIRED", "")

		userActiveEmailFlags    = flag.NewFlagSet("active-email", flag.ExitOnError)
		userActiveEmailCodeFlag = userActiveEmailFlags.String("code", "REQUIRED", "The code for email to active")
	)
	fileFlags.Usage = fileUsage
	fileUploadFlags.Usage = fileUploadUsage

	userFlags.Usage = userUsage
	userRetrieveFlags.Usage = userRetrieveUsage
	userCreateFlags.Usage = userCreateUsage
	userSigninFlags.Usage = userSigninUsage
	userUpdateFlags.Usage = userUpdateUsage
	userSendEmailFlags.Usage = userSendEmailUsage
	userActiveEmailFlags.Usage = userActiveEmailUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "file":
			svcf = fileFlags
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "file":
			switch epn {
			case "upload":
				epf = fileUploadFlags

			}

		case "user":
			switch epn {
			case "retrieve":
				epf = userRetrieveFlags

			case "create":
				epf = userCreateFlags

			case "signin":
				epf = userSigninFlags

			case "update":
				epf = userUpdateFlags

			case "send-email":
				epf = userSendEmailFlags

			case "active-email":
				epf = userActiveEmailFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "file":
			c := filec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upload":
				endpoint = c.Upload(fileUploadEncoderFn)
				data, err = filec.BuildUploadPayload(*fileUploadBodyFlag)
			}
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "retrieve":
				endpoint = c.Retrieve()
				data, err = userc.BuildRetrievePayload(*userRetrieveTokenFlag)
			case "create":
				endpoint = c.Create()
				data, err = userc.BuildCreatePayload(*userCreateBodyFlag)
			case "signin":
				endpoint = c.Signin()
				data, err = userc.BuildSigninPayload(*userSigninBodyFlag)
			case "update":
				endpoint = c.Update()
				data, err = userc.BuildUpdatePayload(*userUpdateBodyFlag, *userUpdateTokenFlag)
			case "send-email":
				endpoint = c.SendEmail()
				data, err = userc.BuildSendEmailPayload(*userSendEmailBodyFlag)
			case "active-email":
				endpoint = c.ActiveEmail()
				data, err = userc.BuildActiveEmailPayload(*userActiveEmailCodeFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// fileUsage displays the usage of the file command and its subcommands.
func fileUsage() {
	fmt.Fprintf(os.Stderr, `The file service makes it possible to upload static file.
Usage:
    %s [globalflags] file COMMAND [flags]

COMMAND:
    upload: Upload static file

Additional help:
    %s file COMMAND --help
`, os.Args[0], os.Args[0])
}
func fileUploadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] file upload -body JSON

Upload static file
    -body JSON: 

Example:
    `+os.Args[0]+` file upload --body '{
      "file": "Et expedita earum delectus."
   }'
`, os.Args[0])
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `The user service makes it possible to view, add or update user info.
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    retrieve: Show user info by Token
    create: Add new user
    signin: Creates a valid JWT
    update: Update avatar and nickname about user
    send-email: Send email to active user
    active-email: Active email to user

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userRetrieveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user retrieve -token STRING

Show user info by Token
    -token STRING: 

Example:
    `+os.Args[0]+` user retrieve --token "Ex sed."
`, os.Args[0])
}

func userCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user create -body JSON

Add new user
    -body JSON: 

Example:
    `+os.Args[0]+` user create --body '{
      "email": "123@456.com",
      "password": "123456"
   }'
`, os.Args[0])
}

func userSigninUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user signin -body JSON

Creates a valid JWT
    -body JSON: 

Example:
    `+os.Args[0]+` user signin --body '{
      "email": "1@1.com",
      "password": "123456"
   }'
`, os.Args[0])
}

func userUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user update -body JSON -token STRING

Update avatar and nickname about user
    -body JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` user update --body '{
      "avatar": "https://www.baidu.com/img/bd_logo1.png?where=super",
      "nickname": "Bobby"
   }' --token "Ea et aperiam reiciendis."
`, os.Args[0])
}

func userSendEmailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user send-email -body JSON

Send email to active user
    -body JSON: 

Example:
    `+os.Args[0]+` user send-email --body '{
      "email": "123@456.com"
   }'
`, os.Args[0])
}

func userActiveEmailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user active-email -code STRING

Active email to user
    -code STRING: The code for email to active

Example:
    `+os.Args[0]+` user active-email --code "123456"
`, os.Args[0])
}
