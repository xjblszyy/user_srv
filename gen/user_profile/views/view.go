// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userProfile views
//
// Command:
// $ goa gen user/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// UserProfile is the viewed result type that is projected based on a view.
type UserProfile struct {
	// Type to project
	Projected *UserProfileView
	// View to render
	View string
}

// UserProfileView is a type that runs validations on a projected type.
type UserProfileView struct {
	// ID is the unique id of the userProfile.
	ID *string
	// email of userProfile
	Email *string
	// password of userProfile
	Password *string
	Avator   *string
	Nickname *string
}

var (
	// UserProfileMap is a map of attribute names in result type UserProfile
	// indexed by view name.
	UserProfileMap = map[string][]string{
		"default": []string{
			"id",
			"email",
			"avator",
			"nickname",
		},
	}
)

// ValidateUserProfile runs the validations defined on the viewed result type
// UserProfile.
func ValidateUserProfile(result *UserProfile) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserProfileView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateUserProfileView runs the validations defined on UserProfileView
// using the "default" view.
func ValidateUserProfileView(result *UserProfileView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.email", *result.Email, "\\S+@\\S+\\.\\S+"))
	}
	return
}
