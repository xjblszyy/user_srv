// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userProfile service
//
// Command:
// $ goa gen user/design

package userprofile

import (
	"context"
	userprofileviews "user/gen/user_profile/views"

	"goa.design/goa/v3/security"
)

// The userProfile service makes it possible to view, add or remove user info.
type Service interface {
	// Show userProfile by Token
	Retrieve(context.Context, *RetrievePayload) (res *UserProfile, err error)
	// Add new user and return its ID.
	Create(context.Context, *AddUser) (res string, err error)
	// Creates a valid JWT
	Signin(context.Context, *SigninPayload) (res string, err error)
	// Update avatar and nickname about user
	Update(context.Context, *UpdateUser) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "userProfile"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"retrieve", "create", "signin", "update"}

// RetrievePayload is the payload type of the userProfile service retrieve
// method.
type RetrievePayload struct {
	// JWT used for authentication
	Token string
}

// UserProfile is the result type of the userProfile service retrieve method.
type UserProfile struct {
	// ID is the unique id of the userProfile.
	ID string
	// email of userProfile
	Email string
	// password of userProfile
	Password string
	Avator   *string
	Nickname *string
}

// AddUser is the payload type of the userProfile service create method.
type AddUser struct {
	// email of userProfile
	Email string
	// password of userProfile
	Password string
}

// Credentials used to authenticate to retrieve JWT token
type SigninPayload struct {
	// Email used to perform signin
	Email string
	// Password used to perform signin
	Password string
}

// UpdateUser is the payload type of the userProfile service update method.
type UpdateUser struct {
	// avator of userProfile
	Avator string
	// nickname of userProfile
	Nickname string
	// JWT used for authentication
	Token string
}

// NotFound is the type returned when attempting to show or delete a user that
// does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing user
	ID string
}

// The Token is invalid
type TokenInvalide struct {
	// Message of error
	Message string
	// ID of missing user
	ID string
}

// The email is exist and can not add user
type EmailExist struct {
	// Message of error
	Message string
	// ID of missing user
	ID string
}

// The email is error or password error
type EmailOrPasswordError struct {
	// Message of error
	Message string
	// ID of missing user
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to show or delete a user that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// Error returns an error description.
func (e *TokenInvalide) Error() string {
	return "The Token is invalid"
}

// ErrorName returns "TokenInvalide".
func (e *TokenInvalide) ErrorName() string {
	return e.Message
}

// Error returns an error description.
func (e *EmailExist) Error() string {
	return "The email is exist and can not add user"
}

// ErrorName returns "EmailExist".
func (e *EmailExist) ErrorName() string {
	return e.Message
}

// Error returns an error description.
func (e *EmailOrPasswordError) Error() string {
	return "The email is error or password error"
}

// ErrorName returns "EmailOrPasswordError".
func (e *EmailOrPasswordError) ErrorName() string {
	return e.Message
}

// NewUserProfile initializes result type UserProfile from viewed result type
// UserProfile.
func NewUserProfile(vres *userprofileviews.UserProfile) *UserProfile {
	var res *UserProfile
	switch vres.View {
	case "default", "":
		res = newUserProfile(vres.Projected)
	}
	return res
}

// NewViewedUserProfile initializes viewed result type UserProfile from result
// type UserProfile using the given view.
func NewViewedUserProfile(res *UserProfile, view string) *userprofileviews.UserProfile {
	var vres *userprofileviews.UserProfile
	switch view {
	case "default", "":
		p := newUserProfileView(res)
		vres = &userprofileviews.UserProfile{p, "default"}
	}
	return vres
}

// newUserProfile converts projected type UserProfile to service type
// UserProfile.
func newUserProfile(vres *userprofileviews.UserProfileView) *UserProfile {
	res := &UserProfile{
		Avator:   vres.Avator,
		Nickname: vres.Nickname,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	return res
}

// newUserProfileView projects result type UserProfile to projected type
// UserProfileView using the "default" view.
func newUserProfileView(res *UserProfile) *userprofileviews.UserProfileView {
	vres := &userprofileviews.UserProfileView{
		ID:       &res.ID,
		Email:    &res.Email,
		Avator:   res.Avator,
		Nickname: res.Nickname,
	}
	return vres
}
