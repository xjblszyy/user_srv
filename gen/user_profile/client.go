// Code generated by goa v3.0.2, DO NOT EDIT.
//
// userProfile client
//
// Command:
// $ goa gen user/design

package userprofile

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "userProfile" service client.
type Client struct {
	RetrieveEndpoint goa.Endpoint
	CreateEndpoint   goa.Endpoint
	SigninEndpoint   goa.Endpoint
	UpdateEndpoint   goa.Endpoint
}

// NewClient initializes a "userProfile" service client given the endpoints.
func NewClient(retrieve, create, signin, update goa.Endpoint) *Client {
	return &Client{
		RetrieveEndpoint: retrieve,
		CreateEndpoint:   create,
		SigninEndpoint:   signin,
		UpdateEndpoint:   update,
	}
}

// Retrieve calls the "retrieve" endpoint of the "userProfile" service.
// Retrieve may return the following errors:
//	- "not_found" (type *NotFound): User not found
//	- "invalide_token" (type *TokenInvalide): invalide token
//	- error: internal error
func (c *Client) Retrieve(ctx context.Context, p *RetrievePayload) (res *UserProfile, err error) {
	var ires interface{}
	ires, err = c.RetrieveEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UserProfile), nil
}

// Create calls the "create" endpoint of the "userProfile" service.
// Create may return the following errors:
//	- "email_exist" (type *EmailExist)
//	- error: internal error
func (c *Client) Create(ctx context.Context, p *AddUser) (res string, err error) {
	var ires interface{}
	ires, err = c.CreateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Signin calls the "signin" endpoint of the "userProfile" service.
// Signin may return the following errors:
//	- "email_or_password_error" (type *EmailOrPasswordError)
//	- error: internal error
func (c *Client) Signin(ctx context.Context, p *SigninPayload) (res string, err error) {
	var ires interface{}
	ires, err = c.SigninEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Update calls the "update" endpoint of the "userProfile" service.
// Update may return the following errors:
//	- "not_found" (type *NotFound): user not found
//	- "invalide_token" (type *TokenInvalide): invalide token
//	- error: internal error
func (c *Client) Update(ctx context.Context, p *UpdateUser) (err error) {
	_, err = c.UpdateEndpoint(ctx, p)
	return
}
